<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <atom:link href="https://newzone.top/rss.xml" rel="self" type="application/rss+xml"/>
    <title>LearnData-开源笔记</title>
    <link>https://newzone.top/</link>
    <description>开源工具、效率方法、心理学探索的自我提升笔记，记录并输出一切能让自己提升的知识。</description>
    <language>zh-CN</language>
    <pubDate>Thu, 25 Aug 2022 08:34:19 GMT</pubDate>
    <lastBuildDate>Thu, 25 Aug 2022 08:34:19 GMT</lastBuildDate>
    <generator>vuepress-plugin-feed2</generator>
    <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
    <item>
      <title>Laravel</title>
      <link>https://newzone.top/code/laravel.html</link>
      <guid>https://newzone.top/code/laravel.html</guid>
      <source url="https://newzone.top/rss.xml">Laravel</source>
      <pubDate>Thu, 25 Aug 2022 08:33:23 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="laravel" tabindex="-1"> Laravel</h1>
<p>一、使用composer方式部署laravel项目</p>
<p>切换国内镜像<a href="https://pkg.phpcomposer.com/" target="_blank" rel="noopener noreferrer">地址</a></p>
<p>命令：<code>composer config -g repo.packagist composer h [laravel.md](laravel.md) ttps://packagist.phpcomposer.com</code></p>
<p>删除镜像（恢复官方源）：<code>composer config -g --unset repos.packagist</code></p>
<p>二、使用composer部署laravel项目</p>
<ol>
<li>
<p>composer create-project laravel/laravel --prefer-dist ./project_2020-3-16
在当前目录的/project_2020-3-16下创建一个名为laravel的laravel项目，默认使用最新版本laravel，以压缩包形式从git上下载</p>
</li>
<li>
<p>composer create-project laravel/laravel=5.8.* --prefer-dist ./project_2020-3-16</p>
<p>指定laravel版本</p>
</li>
</ol>
<p>创建一个名为laravel的laravel项目</p>
<p><code>composer create-project laravel/laravel --prefer-dist ./</code></p>
<p><strong>命令解释：</strong></p>
<p>composer：表示执行composer程序；</p>
<p>create-project：通过composer去创建项目；</p>
<p>laravel/Laravel：需要创建的项目名称；</p>
<p>--prefer-dist：优先下载压缩包方式，而不是直接从github上下载源码（克隆）；</p>
<p>./：表示创建的项目目录位置，也可以是一个目录名；</p>
<p>指定版本创建laravel：</p>
<p><code>composer create-project laravel/laravel=5.4.* --prefer-dist ./</code></p>
<p><strong>查看系统中已有的路由列表</strong>=&gt;在项目根目录输入 ：<code>php artisan route:list</code></p>
<p>路由群组写法：</p>
<p><code>Route::goup(['frefix'=&gt;'admin'],function(){</code></p>
<p>​		<code>Route::get('test',function(){ echo &quot;匹配/admin/test&quot;;})</code></p>
<p><code>});</code></p>
<p><strong>创建控制器</strong>TestController</p>
<p><code>php artisan make:controller TestController</code></p>
<p><strong>创建模型</strong>Test</p>
<p><code>php artisan make:model Home/Test</code></p>
<p><strong>No Application Encryption Key Has Been Specified</strong></p>
<ol>
<li>
<p>复制.env.example到.env：</p>
</li>
<li>
<p>cp -a .env.example .env</p>
</li>
<li>
<p>生成密钥：</p>
</li>
<li>
<p>php artisan key:generate</p>
</li>
<li>
<p>然后才运行：</p>
</li>
<li>
<p>php artisan serve</p>
</li>
</ol>
<p><strong>Php artisan make:auth command is not defined</strong></p>
<p>Follow these three steps
Step 1 - First do this:</p>
<p>laravel new project</p>
<p><code>cd project</code></p>
<p><code>composer require laravel/ui --dev</code>
Note: Laravel UI Composer package is a new first-party package that extracts the UI portion of a Laravel project ( frontend scaffolding typically provided with previous releases of Laravel ) into a separate laravel/ui package. The separate package enables the Laravel team to update, develop and version UI scaffolding package separately from the primary framework and the main Laravel codebase.</p>
<p>Step 2 - Then do this:</p>
<p><code>php artisan ui bootstrap --auth</code>      <code>php artisan migrate</code>
or</p>
<p><code>php artisan ui vue --auth</code>   <code>php artisan migrate</code>
instead of</p>
<p><code>php artisan make:auth  ( which works for Laravel 5.8 and older versions )</code></p>
<p><code>npm install &amp;&amp; npm run dev</code></p>
<p><strong>php artisan migrate错误</strong></p>
<p><code>App\Providers\AppServiceProvider.php</code></p>
<p><code>use Illuminate\Support\Facades\Schema;</code></p>
<p><code>...</code></p>
<p><code>public function boot()</code>
<code>{</code>
<code>				Schema::defaultStringLength(191);</code>
<code>}</code></p>
<h3 id="使用docker安装laravel" tabindex="-1"> 使用docker安装laravel</h3>
<p>先安装docker、docker-compose后</p>
<div><pre><code><span>curl</span> <span>-s</span> https://laravel.build/example-app <span>|</span> <span>bash</span>

<span>curl</span> <span>-s</span> <span>"https://laravel.build/example-app?with=mysql,redis"</span> <span>|</span> <span>bash</span>
<span>#如果你没有制定你想配置的服务，默认将配置 mysql，redis，meilisearch，mailhog 和 selenium</span>

<span>cd</span> example-app

<span>#编译并启动（前台）-d参数是后台启动</span>
./vendor/bin/sail up
./vendor/bin/sail up <span>-d</span>

<span>#启动</span>
./vendor/bin/sail start
<span>#停止</span>
./vendor/bin/sail stop


</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>PHP</title>
      <link>https://newzone.top/code/php.html</link>
      <guid>https://newzone.top/code/php.html</guid>
      <source url="https://newzone.top/rss.xml">PHP</source>
      <pubDate>Thu, 25 Aug 2022 08:33:23 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="php" tabindex="-1"> PHP</h1>
<h3 id="常用函数" tabindex="-1"> 常用函数</h3>
<div><pre><code>parse_str — 将字符串解析成多个变量
<span>parse_str</span><span>(</span><span>"name=Bill&amp;age=60"</span><span>,</span><span>$arr</span><span>)</span><span>;</span><span>//第一个参数为查询字符串，第二个为结果数组</span>

<span>array_filter</span><span>(</span> <span>array</span> <span>$input</span><span>[</span><span>,</span> <span>callable</span> <span>$callback</span> <span>=</span> <span>""</span><span>]</span> <span>)</span> 
<span>// 用回调函数过滤数组中的单元 依次将 input 数组中的每个值传递到 callback 函数。如果 callback 函数返回 TRUE，则 input 数组的当前值会被包含在返回的结果数组中。数组的键名保留不变，如果没有提供 callback 函数，将删除 input 中所有等值为 FALSE 的条目</span>

explode <span>//用一个字符串分割另一个字符串</span>
range <span>//建立一个指定范围的数组</span>
    
    
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id="fpm" tabindex="-1"> fpm</h3>
<div><pre><code><span>#1、查看php-fpm的进程个数</span>
<span>ps</span> <span>-ef</span> <span>|</span><span>grep</span> <span>"php-fpm"</span><span>|</span><span>grep</span> <span>"pool"</span><span>|</span><span>wc</span> <span>-l</span>
<span>#2、查看每个php-fpm占用的内存大小</span>
<span>ps</span> <span>-ylC</span> php-fpm <span>--sort:rss</span>
<span>#3.查看PHP-FPM在你的机器上的平均内存占用</span>
<span>ps</span> --no-headers <span>-o</span> <span>"rss,cmd"</span> <span>-C</span> php-fpm <span>|</span> <span>awk</span> <span>'{ sum+=$1 } END { printf ("%d%s\n", sum/NR/1024,"M") }'</span>
<span>#4.查看单个php-fpm进程消耗内存的明细</span>
pmap <span><span>$(</span>pgrep php-fpm<span>)</span></span> <span>|</span> <span>less</span>


<span>#查看php、nginx编译参数</span>
nginx <span>-V</span>
php <span>-i</span> <span>|</span><span>grep</span> configure

<span>#grep不输出注释的行</span>
<span>grep</span> <span>"^[^#;]"</span> smb.conf

</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>重启多个php-fpm</p>
<div><pre><code><span>#php-fpm添加service服务</span>
<span>cp</span> /usr/local/src/php5.6.40/sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm

update-rc.d php-fpm defaults
 
<span># 添加</span>
update-rc.d ServiceName defaults
 
<span># 删除</span>
update-rc.d ServiceName remove

<span>#关闭php-fpm</span>
<span>pkill</span> php-fpm 或者 <span>killall</span> php-fpm

<span>#查看php-fpm配置文件路径</span>
<span>ps</span> aux <span>|</span><span>grep</span> php-fpm

<span>#查看配置文件，找到pid路径</span>
pid <span>=</span> /dev/shm/php-fpm-9001.pid

<span>#根据pid重启php-fpm</span>
<span>sudo</span> <span>kill</span> <span>-USR2</span> <span><span>`</span><span>cat</span> /dev/shm/php-fpm-9001.pid<span>`</span></span>

</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id="php多线程" tabindex="-1"> php多线程</h3>
<p>开启parallel多线程扩展 --enable-maintainer-zts</p>
<div><pre><code><span>#parallel</span>
 <span>cd</span> /usr/local/src/php7/parallel-1.1.4 <span>&amp;&amp;</span> <span>\</span>
 /web/software/php-7.4.28/bin/phpize <span>&amp;&amp;</span> <span>\</span>
 ./configure --with-php-config<span>=</span>/web/software/php-7.4.28/bin/php-config <span>&amp;&amp;</span> <span>\</span>
 <span>make</span> <span>&amp;&amp;</span> <span>make</span> <span>install</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div></div></div><p>示例：</p>
<div><pre><code><span><span>&lt;?php</span>
<span>require_once</span> <span>'baseClassV4/listen/BaseCache.php'</span><span>;</span>
<span>$redis</span> <span>=</span> <span>new</span> <span>BaseCache</span> <span>(</span><span>'redis'</span><span>,</span> <span>'default'</span><span>)</span><span>;</span>
<span>$startTime</span> <span>=</span> <span>time</span><span>(</span><span>)</span><span>;</span>
<span>$num</span> <span>=</span> <span>10</span><span>;</span>
<span>$j</span> <span>=</span> <span>0</span><span>;</span>
<span>$list</span> <span>=</span> <span>range</span><span>(</span><span>0</span><span>,</span> <span>1000</span><span>)</span><span>;</span>
<span>$path</span> <span>=</span> <span>'baseClassV4/listen/BaseCache.php'</span><span>;</span>

<span>$producer</span> <span>=</span> <span>function</span> <span>(</span><span>$parameters</span><span>)</span> <span>{</span> <span>// 线程调用回调函数体</span>
	<span>$i</span> <span>=</span> <span>0</span><span>;</span>
	<span>extract</span><span>(</span><span>$parameters</span><span>)</span><span>;</span> 
	<span>foreach</span> <span>(</span><span>$list</span> <span>as</span> <span>$item</span><span>)</span> <span>{</span>
		<span>$r</span> <span>=</span> <span>$redis</span><span>-></span><span>zIncrBy</span><span>(</span><span>'test'</span><span>,</span> <span>1</span><span>,</span> <span>$threadNum</span><span>)</span><span>;</span>
		<span>if</span> <span>(</span><span>$r</span> <span>></span> <span>0</span><span>)</span> <span>{</span>
			<span>$i</span><span>++</span><span>;</span>
		<span>}</span>
		<span>echo</span> <span>$threadNum</span> <span>.</span> <span>':'</span> <span>.</span> <span>$item</span> <span>.</span> <span>PHP_EOL</span><span>;</span>
		<span>usleep</span><span>(</span><span>10000</span><span>)</span><span>;</span>
	<span>}</span>
	<span>return</span> <span>$i</span><span>;</span>
<span>}</span><span>;</span>

<span>function</span> <span>start_threads</span><span>(</span><span>$list</span><span>,</span> <span>$producer</span><span>,</span> <span>$threadNum</span> <span>=</span> <span>1</span><span>,</span> <span>$parameters</span> <span>=</span> <span>[</span><span>]</span><span>,</span> <span>$path</span> <span>=</span> <span>''</span><span>,</span> <span>$sleep</span> <span>=</span> <span>1</span><span>)</span>
<span>{</span>
	<span>$list</span> <span>=</span> <span>array_chunk</span><span>(</span><span>$list</span><span>,</span> <span>count</span><span>(</span><span>$list</span><span>)</span> <span>/</span> <span>$threadNum</span><span>)</span><span>;</span>
	<span>foreach</span> <span>(</span><span>$list</span> <span>as</span> <span>$key</span> <span>=></span> <span>$item</span><span>)</span> <span>{</span>
		<span>$parameters</span><span>[</span><span>'list'</span><span>]</span> <span>=</span> <span>$item</span><span>;</span>
		<span>$parameters</span><span>[</span><span>'threadNum'</span><span>]</span> <span>=</span> <span>$key</span><span>;</span>
		<span>$threads</span><span>[</span><span>$key</span><span>]</span> <span>=</span> <span>(</span><span>new</span> <span><span>\</span>parallel<span>\</span>Runtime</span><span>(</span><span>$path</span><span>)</span><span>)</span><span>-></span><span>run</span><span>(</span><span>$producer</span><span>,</span> <span>[</span><span>$parameters</span><span>]</span><span>)</span><span>;</span>
	<span>}</span>

	<span>while</span> <span>(</span><span>!</span><span>empty</span><span>(</span><span>$threads</span><span>)</span><span>)</span> <span>{</span>
		<span>foreach</span> <span>(</span><span>$threads</span> <span>as</span> <span>$key</span> <span>=></span> <span>&amp;</span><span>$thread</span><span>)</span> <span>{</span>
			<span>if</span> <span>(</span><span>$thread</span><span>-></span><span>done</span><span>(</span><span>)</span><span>)</span> <span>{</span> <span>// 检测线程状态，返回true时线程运行完毕</span>
				<span>$result</span> <span>=</span> <span>$thread</span><span>-></span><span>value</span><span>(</span><span>)</span><span>;</span> <span>// 获取线程内函数执行返回的结果</span>
				<span>echo</span> <span>"ThreadId: <span><span>$key</span></span> => result: <span><span>{</span><span>$result</span><span>}</span></span> (End)\n"</span><span>;</span>
				<span>unset</span><span>(</span><span>$threads</span><span>[</span><span>$key</span><span>]</span><span>)</span><span>;</span>
			<span>}</span>
		<span>}</span>
		<span>sleep</span><span>(</span><span>$sleep</span><span>)</span><span>;</span>
	<span>}</span>
<span>}</span>


<span>start_threads</span><span>(</span><span>$list</span><span>,</span> <span>$producer</span><span>,</span> <span>10</span><span>,</span> <span>[</span><span>'redis'</span> <span>=></span> <span>$redis</span><span>]</span><span>,</span> <span>$path</span><span>,</span> <span>1</span><span>)</span><span>;</span>
</span></code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div>]]></content:encoded>
    </item>
  </channel>
</rss>