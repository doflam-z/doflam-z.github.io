<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <atom:link href="https://doflam-z.github.io/rss.xml" rel="self" type="application/rss+xml"/>
    <title>CodeNote</title>
    <link>https://doflam-z.github.io/</link>
    <description>笔记网站。</description>
    <language>zh-CN</language>
    <pubDate>Wed, 02 Jul 2025 02:00:46 GMT</pubDate>
    <lastBuildDate>Wed, 02 Jul 2025 02:00:46 GMT</lastBuildDate>
    <generator>vuepress-plugin-feed2</generator>
    <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
    <item>
      <title>rabbitmq</title>
      <link>https://doflam-z.github.io/services/rabbitmq.html</link>
      <guid>https://doflam-z.github.io/services/rabbitmq.html</guid>
      <source url="https://doflam-z.github.io/rss.xml">rabbitmq</source>
      <pubDate>Wed, 23 Apr 2025 02:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="rabbitmq" tabindex="-1"> rabbitmq</h1>
<blockquote>
<p>rabbitmq的部署，集群配置，常用命令等</p>
</blockquote>
<h2 id="docker部署rabbitmq" tabindex="-1"> docker部署rabbitmq</h2>
<blockquote>
<p>部署在内网两个节点，使用镜像集群配置</p>
</blockquote>
<h3 id="两台机生成配置文件" tabindex="-1"> 两台机生成配置文件</h3>
<p>node1 docker-compose.yml</p>
<div><pre><code><span>version</span><span>:</span> <span>'3.8'</span>
<span>services</span><span>:</span>
  <span>rabbitmq</span><span>:</span>
    <span>image</span><span>:</span> rabbitmq<span>:</span>3.12.8<span>-</span>management
    <span>container_name</span><span>:</span> rabbitmq
    <span>hostname</span><span>:</span> node1 <span># 节点名称</span>
    <span>restart</span><span>:</span> unless<span>-</span>stopped <span># 除非stop命令否则自动重启</span>
    <span>mem_limit</span><span>:</span> 8g        <span># 限制最多使用 8GB 内存</span>
    <span>cpus</span><span>:</span> <span>6</span>              <span># 限制最多使用 6 个 CPU</span>
    <span>ports</span><span>:</span>
      <span>-</span> <span>"192.168.2.135:5672:5672"</span>  <span># AMQP协议端口</span>
      <span>-</span> <span>"15672:15672"</span>  <span># 管理界面端口</span>
      <span>-</span> <span>"192.168.2.135:4369:4369"</span> <span># 集群通信端口</span>
      <span>-</span> <span>"192.168.2.135:25672:25672"</span> <span># 集群通信端口</span>
    <span>environment</span><span>:</span>
      <span>RABBITMQ_DEFAULT_USER</span><span>:</span> <span>"jobui"</span>
      <span>RABBITMQ_DEFAULT_PASS</span><span>:</span> <span>"jobui123"</span>
      <span>RABBITMQ_ERLANG_COOKIE</span><span>:</span> <span>"jobui_rabbit"</span>  <span># 集群通信密钥</span>
      <span>RABBITMQ_NODENAME</span><span>:</span> rabbit@node1
    <span>volumes</span><span>:</span>
      <span>-</span> /ssd_data/rabbitmq/data<span>:</span>/var/lib/rabbitmq  <span># 数据持久化</span>
    <span>extra_hosts</span><span>:</span>
      <span>-</span> <span>"node2:192.168.2.139"</span> <span># 关键：让容器能解析node2</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>node2 docker-compose.yml</p>
<div><pre><code><span>version</span><span>:</span> <span>'3.8'</span>
<span>services</span><span>:</span>
  <span>rabbitmq</span><span>:</span>
    <span>image</span><span>:</span> rabbitmq<span>:</span>3.12.8<span>-</span>management <span># 或指定版本如 rabbitmq:3.12</span>
    <span>container_name</span><span>:</span> rabbitmq
    <span>hostname</span><span>:</span> node2
    <span>restart</span><span>:</span> unless<span>-</span>stopped
    <span>mem_limit</span><span>:</span> 8g        <span># 限制最多使用 8GB 内存</span>
    <span>cpus</span><span>:</span> <span>6</span>              <span># 限制最多使用 6 个 CPU</span>
    <span>ports</span><span>:</span>
      <span>-</span> <span>"192.168.2.139:5672:5672"</span>  <span># AMQP协议端口</span>
      <span>-</span> <span>"192.168.2.139:4369:4369"</span>  <span># 集群通信端口</span>
      <span>-</span> <span>"192.168.2.139:25672:25672"</span>
    <span>environment</span><span>:</span>
      <span>RABBITMQ_DEFAULT_USER</span><span>:</span> <span>"jobui"</span>
      <span>RABBITMQ_DEFAULT_PASS</span><span>:</span> <span>"jobui123"</span>
      <span>RABBITMQ_ERLANG_COOKIE</span><span>:</span> <span>"jobui_rabbit"</span>  <span># 集群通信密钥</span>
      <span>RABBITMQ_NODENAME</span><span>:</span> rabbit@node2
      <span>RABBITMQ_CLUSTER_NODES</span><span>:</span> rabbit@node1  <span># 指向初始节点</span>
    <span>volumes</span><span>:</span>
      <span>-</span> /ssdb_data/rabbitmq/data<span>:</span>/var/lib/rabbitmq
    <span>extra_hosts</span><span>:</span>
      <span>-</span> <span>"node1:192.168.2.135"</span>  <span># 关键：让容器能解析node1</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id="分别启动容器" tabindex="-1"> 分别启动容器</h3>
<div><pre><code><span>docker-compose</span> up <span>-d</span>
</code></pre><div aria-hidden="true"><div></div></div></div><h3 id="节点dns配置写入hosts" tabindex="-1"> 节点dns配置写入hosts</h3>
<p>node1写入</p>
<div><pre><code><span>echo</span> <span>"192.168.2.139 node2"</span> <span>|</span> <span>sudo</span> <span>tee</span> <span>-a</span> /etc/hosts
</code></pre><div aria-hidden="true"><div></div></div></div><p>node2写入</p>
<div><pre><code><span>echo</span> <span>"192.168.2.135 node1"</span> <span>|</span> <span>sudo</span> <span>tee</span> <span>-a</span> /etc/hosts
</code></pre><div aria-hidden="true"><div></div></div></div><h3 id="node2加入集群" tabindex="-1"> node2加入集群</h3>
<div><pre><code><span>docker</span> <span>exec</span> rabbitmq rabbitmqctl stop_app	<span># 停止服务</span>
<span>docker</span> <span>exec</span> rabbitmq rabbitmqctl reset <span># 重置服务（会清除数据）</span>
<span>docker</span> <span>exec</span> rabbitmq rabbitmqctl join_cluster rabbit@node1 <span># 加入节点</span>
<span>docker</span> <span>exec</span> rabbitmq rabbitmqctl start_app <span># 启动服务</span>
<span>docker</span> <span>exec</span> rabbitmq rabbitmqctl cluster_status <span># 查看集群状态</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div></div></div><h3 id="配置镜像集群" tabindex="-1"> 配置镜像集群</h3>
<p>在任意节点执行</p>
<div><pre><code><span>docker</span> <span>exec</span> <span>-it</span> rabbitmq rabbitmqctl set_policy ha-all <span>"^"</span> <span>'{"ha-mode":"all"}'</span>
</code></pre><div aria-hidden="true"><div></div></div></div><h3 id="配置防火墙" tabindex="-1"> 配置防火墙</h3>
<blockquote>
<p>docker启动的端口默认所有ip都能请求，不安全，但是docker 会覆盖 <code>firewalld</code> 的部分规则，需在 <code>DOCKER-USER</code> 链中添加规则，先禁用所有ip访问web管理端口再配置只允许指定ip访问，</p>
</blockquote>
<div><pre><code><span>sudo</span> iptables <span>-I</span> DOCKER-<span>USER</span> <span>-p</span> tcp <span>--dport</span> <span>15672</span> <span>-j</span> DROP
<span>sudo</span> iptables <span>-I</span> DOCKER-<span>USER</span> <span>-p</span> tcp <span>--dport</span> <span>15672</span> <span>-s</span> <span>192.168</span>.1.10 <span>-j</span> ACCEPT
</code></pre><div aria-hidden="true"><div></div><div></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>GitHub 搜索技巧速查表</title>
      <link>https://doflam-z.github.io/tool/github.html</link>
      <guid>https://doflam-z.github.io/tool/github.html</guid>
      <source url="https://doflam-z.github.io/rss.xml">GitHub 搜索技巧速查表</source>
      <pubDate>Thu, 27 Mar 2025 07:44:02 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="github-搜索技巧速查表" tabindex="-1"> GitHub 搜索技巧速查表</h1>
<table>
<thead>
<tr>
<th>搜索类型</th>
<th>语法示例</th>
<th>说明</th>
<th>实际应用场景</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>基础搜索</strong></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>仓库名称</td>
<td><code>in:name vue</code></td>
<td>搜索名称包含&quot;vue&quot;的仓库</td>
<td>找特定技术栈的框架/库</td>
</tr>
<tr>
<td>仓库描述</td>
<td><code>in:description 机器学习</code></td>
<td>搜索描述包含&quot;机器学习&quot;的仓库</td>
<td>发现特定领域的项目</td>
</tr>
<tr>
<td>README内容</td>
<td><code>in:readme 安装指南</code></td>
<td>搜索README包含&quot;安装指南&quot;的仓库</td>
<td>找有详细文档的项目</td>
</tr>
<tr>
<td><strong>高级筛选</strong></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>星标数</td>
<td><code>stars:&gt;1000</code></td>
<td>搜索星标超过1000的仓库</td>
<td>找高质量热门项目</td>
</tr>
<tr>
<td>Fork数</td>
<td><code>forks:&gt;500</code></td>
<td>搜索Fork超过500的仓库</td>
<td>找被广泛使用的项目</td>
</tr>
<tr>
<td>文件大小</td>
<td><code>size:100..500</code></td>
<td>搜索100KB到500KB大小的仓库</td>
<td>找轻量级工具库</td>
</tr>
<tr>
<td><strong>语言/时间</strong></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>编程语言</td>
<td><code>language:python</code></td>
<td>搜索Python项目</td>
<td>找特定语言的资源</td>
</tr>
<tr>
<td>更新时间</td>
<td><code>pushed:&gt;2024-01-01</code></td>
<td>搜索2024年后更新过的项目</td>
<td>找近期活跃维护的项目</td>
</tr>
<tr>
<td><strong>组合搜索</strong></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>多条件组合</td>
<td><code>in:name react stars:&gt;5000 language:javascript</code></td>
<td>搜索名称含react、星标&gt;5k的JS项目</td>
<td>找React生态的流行库</td>
</tr>
<tr>
<td><strong>特殊搜索</strong></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>用户仓库</td>
<td><code>user:google</code></td>
<td>搜索Google用户的所有仓库</td>
<td>跟踪特定开发者/公司的项目</td>
</tr>
<tr>
<td>组织仓库</td>
<td><code>org:facebook</code></td>
<td>搜索Facebook组织的所有仓库</td>
<td>关注大厂开源项目</td>
</tr>
<tr>
<td>许可证类型</td>
<td><code>license:MIT</code></td>
<td>搜索MIT许可证的项目</td>
<td>找可自由使用的代码</td>
</tr>
<tr>
<td><strong>代码搜索</strong></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>文件内容</td>
<td><code>快速排序 in:file language:java</code></td>
<td>搜索Java文件中的快速排序实现</td>
<td>找算法实现示例</td>
</tr>
<tr>
<td>文件路径</td>
<td><code>path:src/utils function debounce</code></td>
<td>在src/utils路径下搜索防抖函数</td>
<td>定位特定功能的实现位置</td>
</tr>
</tbody>
</table>
<h2 id="💡-使用技巧" tabindex="-1"> 💡 使用技巧</h2>
<ol>
<li>
<p><strong>组合使用</strong>：<code>in:name vue stars:&gt;10000 pushed:&gt;2023-01-01</code><br>
→ 找2023年后更新的、星标超1万的Vue项目</p>
</li>
<li>
<p><strong>排除关键词</strong>：<code>NOT 旧版本</code><br>
→ 排除包含&quot;旧版本&quot;的结果</p>
</li>
<li>
<p><strong>范围搜索</strong>：<code>stars:100..500</code><br>
→ 找星标在100到500之间的项目</p>
</li>
<li>
<p><strong>排序结果</strong>：在GitHub搜索结果页面可以按<code>Most stars</code>/<code>Recently updated</code>等排序</p>
</li>
</ol>
<blockquote>
<p>📌 提示：在GitHub搜索页面点击&quot;Advanced search&quot;可使用可视化工具构建复杂查询</p>
</blockquote>
]]></content:encoded>
    </item>
    <item>
      <title>Laravel</title>
      <link>https://doflam-z.github.io/php/laravel.html</link>
      <guid>https://doflam-z.github.io/php/laravel.html</guid>
      <source url="https://doflam-z.github.io/rss.xml">Laravel</source>
      <pubDate>Mon, 24 Mar 2025 02:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="laravel" tabindex="-1"> Laravel</h1>
<h3 id="使用composer方式部署laravel项目" tabindex="-1"> 使用composer方式部署laravel项目</h3>
<p>切换国内镜像<a href="https://pkg.phpcomposer.com/" target="_blank" rel="noopener noreferrer">地址</a></p>
<div><pre><code><span>composer</span> config <span>-g</span> repo.packagist <span>composer</span> h <span>[</span>laravel.md<span>]</span><span>(</span>laravel.md<span>)</span> ttps://packagist.phpcomposer.com
</code></pre><div aria-hidden="true"><div></div></div></div><p>删除镜像（恢复官方源）</p>
<div><pre><code><span>composer</span> config <span>-g</span> <span>--unset</span> repos.packagist
</code></pre><div aria-hidden="true"><div></div></div></div><p>使用composer部署laravel项目</p>
<div><pre><code><span># 在当前目录的/project_2020-3-16下创建一个名为laravel的laravel项目，默认使用最新版本laravel，以压缩包形式从git上下载</span>
<span>composer</span> create-project laravel/laravel --prefer-dist ./project_2020-3-16

<span># 也可指定laravel版本</span>
<span>composer</span> create-project laravel/laravel<span>=</span><span>5.8</span>.* --prefer-dist ./project_2020-3-16
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div></div></div><p><strong>命令解释：</strong></p>
<p>composer：表示执行composer程序；</p>
<p>create-project：通过composer去创建项目；</p>
<p>laravel/Laravel：需要创建的项目名称；</p>
<p>--prefer-dist：优先下载压缩包方式，而不是直接从github上下载源码（克隆）；</p>
<p>./：表示创建的项目目录位置，也可以是一个目录名；</p>
<p>指定版本创建laravel：</p>
<p><code>composer create-project laravel/laravel=5.4.* --prefer-dist ./</code></p>
<p><strong>查看系统中已有的路由列表</strong>=&gt;在项目根目录输入 ：<code>php artisan route:list</code></p>
<p>路由群组写法：</p>
<p><code>Route::goup(['frefix'=&gt;'admin'],function(){</code></p>
<p>​		<code>Route::get('test',function(){ echo &quot;匹配/admin/test&quot;;})</code></p>
<p><code>});</code></p>
<p><strong>创建控制器</strong>TestController</p>
<p><code>php artisan make:controller TestController</code></p>
<p><strong>创建模型</strong>Test</p>
<p><code>php artisan make:model Home/Test</code></p>
<p><strong>No Application Encryption Key Has Been Specified</strong></p>
<ol>
<li>
<p>复制.env.example到.env：</p>
</li>
<li>
<p>cp -a .env.example .env</p>
</li>
<li>
<p>生成密钥：</p>
</li>
<li>
<p>php artisan key:generate</p>
</li>
<li>
<p>然后才运行：</p>
</li>
<li>
<p>php artisan serve</p>
</li>
</ol>
<p><strong>Php artisan make:auth command is not defined</strong></p>
<p>Follow these three steps
Step 1 - First do this:</p>
<p>laravel new project</p>
<p><code>cd project</code></p>
<p><code>composer require laravel/ui --dev</code>
Note: Laravel UI Composer package is a new first-party package that extracts the UI portion of a Laravel project ( frontend scaffolding typically provided with previous releases of Laravel ) into a separate laravel/ui package. The separate package enables the Laravel team to update, develop and version UI scaffolding package separately from the primary framework and the main Laravel codebase.</p>
<p>Step 2 - Then do this:</p>
<p><code>php artisan ui bootstrap --auth</code>      <code>php artisan migrate</code>
or</p>
<p><code>php artisan ui vue --auth</code>   <code>php artisan migrate</code>
instead of</p>
<p><code>php artisan make:auth  ( which works for Laravel 5.8 and older versions )</code></p>
<p><code>npm install &amp;&amp; npm run dev</code></p>
<p><strong>php artisan migrate错误</strong></p>
<p><code>App\Providers\AppServiceProvider.php</code></p>
<p><code>use Illuminate\Support\Facades\Schema;</code></p>
<p><code>...</code></p>
<p><code>public function boot()</code>
<code>{</code>
<code>				Schema::defaultStringLength(191);</code>
<code>}</code></p>
<h3 id="使用docker安装laravel" tabindex="-1"> 使用docker安装laravel</h3>
<p>先安装docker、docker-compose后</p>
<div><pre><code><span>curl</span> <span>-s</span> https://laravel.build/example-app <span>|</span> <span>bash</span>

<span>curl</span> <span>-s</span> <span>"https://laravel.build/example-app?with=mysql,redis"</span> <span>|</span> <span>bash</span>
<span>#如果你没有制定你想配置的服务，默认将配置 mysql，redis，meilisearch，mailhog 和 selenium</span>

<span>cd</span> example-app

<span>#编译并启动（前台）-d参数是后台启动</span>
./vendor/bin/sail up
./vendor/bin/sail up <span>-d</span>

<span>#启动</span>
./vendor/bin/sail start
<span>#停止</span>
./vendor/bin/sail stop


</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>PHP</title>
      <link>https://doflam-z.github.io/php/php.html</link>
      <guid>https://doflam-z.github.io/php/php.html</guid>
      <source url="https://doflam-z.github.io/rss.xml">PHP</source>
      <pubDate>Mon, 24 Mar 2025 02:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="php" tabindex="-1"> PHP</h1>
<h3 id="常用函数" tabindex="-1"> 常用函数</h3>
<div><pre><code>parse_str — 将字符串解析成多个变量
<span>parse_str</span><span>(</span><span>"name=Bill&amp;age=60"</span><span>,</span><span>$arr</span><span>)</span><span>;</span><span>//第一个参数为查询字符串，第二个为结果数组</span>

<span>array_filter</span><span>(</span> <span>array</span> <span>$input</span><span>[</span><span>,</span> <span>callable</span> <span>$callback</span> <span>=</span> <span>""</span><span>]</span> <span>)</span> 
<span>// 用回调函数过滤数组中的单元 依次将 input 数组中的每个值传递到 callback 函数。如果 callback 函数返回 TRUE，则 input 数组的当前值会被包含在返回的结果数组中。数组的键名保留不变，如果没有提供 callback 函数，将删除 input 中所有等值为 FALSE 的条目</span>

explode <span>//用一个字符串分割另一个字符串</span>
range <span>//建立一个指定范围的数组</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id="fpm" tabindex="-1"> fpm</h3>
<div><pre><code><span>#1、查看php-fpm的进程个数</span>
<span>ps</span> <span>-ef</span> <span>|</span><span>grep</span> <span>"php-fpm"</span><span>|</span><span>grep</span> <span>"pool"</span><span>|</span><span>wc</span> <span>-l</span>
<span>#2、查看每个php-fpm占用的内存大小</span>
<span>ps</span> <span>-ylC</span> php-fpm <span>--sort:rss</span>
<span>#3.查看PHP-FPM在你的机器上的平均内存占用</span>
<span>ps</span> --no-headers <span>-o</span> <span>"rss,cmd"</span> <span>-C</span> php-fpm <span>|</span> <span>awk</span> <span>'{ sum+=$1 } END { printf ("%d%s\n", sum/NR/1024,"M") }'</span>
<span>#4.查看单个php-fpm进程消耗内存的明细</span>
pmap <span><span>$(</span>pgrep php-fpm<span>)</span></span> <span>|</span> <span>less</span>


<span>#查看php、nginx编译参数</span>
nginx <span>-V</span>
php <span>-i</span> <span>|</span><span>grep</span> configure

<span>#grep不输出注释的行</span>
<span>grep</span> <span>"^[^#;]"</span> smb.conf

</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>重启多个php-fpm</p>
<div><pre><code><span>#php-fpm添加service服务</span>
<span>cp</span> /usr/local/src/php5.6.40/sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm

update-rc.d php-fpm defaults
 
<span># 添加</span>
update-rc.d ServiceName defaults
 
<span># 删除</span>
update-rc.d ServiceName remove

<span>#关闭php-fpm</span>
<span>pkill</span> php-fpm 或者 <span>killall</span> php-fpm

<span>#查看php-fpm配置文件路径</span>
<span>ps</span> aux <span>|</span><span>grep</span> php-fpm

<span>#查看配置文件，找到pid路径</span>
pid <span>=</span> /dev/shm/php-fpm-9001.pid

<span>#根据pid重启php-fpm</span>
<span>sudo</span> <span>kill</span> <span>-USR2</span> <span><span>`</span><span>cat</span> /dev/shm/php-fpm-9001.pid<span>`</span></span>

</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id="php多线程" tabindex="-1"> php多线程</h3>
<p>开启parallel多线程扩展 --enable-maintainer-zts</p>
<div><pre><code><span>#parallel</span>
 <span>cd</span> /usr/local/src/php7/parallel-1.1.4 <span>&amp;&amp;</span> <span>\</span>
 /web/software/php-7.4.28/bin/phpize <span>&amp;&amp;</span> <span>\</span>
 ./configure --with-php-config<span>=</span>/web/software/php-7.4.28/bin/php-config <span>&amp;&amp;</span> <span>\</span>
 <span>make</span> <span>&amp;&amp;</span> <span>make</span> <span>install</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div></div></div><p>示例：</p>
<div><pre><code><span><span>&lt;?php</span>
<span>require_once</span> <span>'baseClassV4/listen/BaseCache.php'</span><span>;</span>
<span>$redis</span> <span>=</span> <span>new</span> <span>BaseCache</span> <span>(</span><span>'redis'</span><span>,</span> <span>'default'</span><span>)</span><span>;</span>
<span>$startTime</span> <span>=</span> <span>time</span><span>(</span><span>)</span><span>;</span>
<span>$num</span> <span>=</span> <span>10</span><span>;</span>
<span>$j</span> <span>=</span> <span>0</span><span>;</span>
<span>$list</span> <span>=</span> <span>range</span><span>(</span><span>0</span><span>,</span> <span>1000</span><span>)</span><span>;</span>
<span>$path</span> <span>=</span> <span>'baseClassV4/listen/BaseCache.php'</span><span>;</span>

<span>$producer</span> <span>=</span> <span>function</span> <span>(</span><span>$parameters</span><span>)</span> <span>{</span> <span>// 线程调用回调函数体</span>
	<span>$i</span> <span>=</span> <span>0</span><span>;</span>
	<span>extract</span><span>(</span><span>$parameters</span><span>)</span><span>;</span> 
	<span>foreach</span> <span>(</span><span>$list</span> <span>as</span> <span>$item</span><span>)</span> <span>{</span>
		<span>$r</span> <span>=</span> <span>$redis</span><span>-></span><span>zIncrBy</span><span>(</span><span>'test'</span><span>,</span> <span>1</span><span>,</span> <span>$threadNum</span><span>)</span><span>;</span>
		<span>if</span> <span>(</span><span>$r</span> <span>></span> <span>0</span><span>)</span> <span>{</span>
			<span>$i</span><span>++</span><span>;</span>
		<span>}</span>
		<span>echo</span> <span>$threadNum</span> <span>.</span> <span>':'</span> <span>.</span> <span>$item</span> <span>.</span> <span>PHP_EOL</span><span>;</span>
		<span>usleep</span><span>(</span><span>10000</span><span>)</span><span>;</span>
	<span>}</span>
	<span>return</span> <span>$i</span><span>;</span>
<span>}</span><span>;</span>

<span>function</span> <span>start_threads</span><span>(</span><span>$list</span><span>,</span> <span>$producer</span><span>,</span> <span>$threadNum</span> <span>=</span> <span>1</span><span>,</span> <span>$parameters</span> <span>=</span> <span>[</span><span>]</span><span>,</span> <span>$path</span> <span>=</span> <span>''</span><span>,</span> <span>$sleep</span> <span>=</span> <span>1</span><span>)</span>
<span>{</span>
	<span>$list</span> <span>=</span> <span>array_chunk</span><span>(</span><span>$list</span><span>,</span> <span>count</span><span>(</span><span>$list</span><span>)</span> <span>/</span> <span>$threadNum</span><span>)</span><span>;</span>
	<span>foreach</span> <span>(</span><span>$list</span> <span>as</span> <span>$key</span> <span>=></span> <span>$item</span><span>)</span> <span>{</span>
		<span>$parameters</span><span>[</span><span>'list'</span><span>]</span> <span>=</span> <span>$item</span><span>;</span>
		<span>$parameters</span><span>[</span><span>'threadNum'</span><span>]</span> <span>=</span> <span>$key</span><span>;</span>
		<span>$threads</span><span>[</span><span>$key</span><span>]</span> <span>=</span> <span>(</span><span>new</span> <span><span>\</span>parallel<span>\</span>Runtime</span><span>(</span><span>$path</span><span>)</span><span>)</span><span>-></span><span>run</span><span>(</span><span>$producer</span><span>,</span> <span>[</span><span>$parameters</span><span>]</span><span>)</span><span>;</span>
	<span>}</span>

	<span>while</span> <span>(</span><span>!</span><span>empty</span><span>(</span><span>$threads</span><span>)</span><span>)</span> <span>{</span>
		<span>foreach</span> <span>(</span><span>$threads</span> <span>as</span> <span>$key</span> <span>=></span> <span>&amp;</span><span>$thread</span><span>)</span> <span>{</span>
			<span>if</span> <span>(</span><span>$thread</span><span>-></span><span>done</span><span>(</span><span>)</span><span>)</span> <span>{</span> <span>// 检测线程状态，返回true时线程运行完毕</span>
				<span>$result</span> <span>=</span> <span>$thread</span><span>-></span><span>value</span><span>(</span><span>)</span><span>;</span> <span>// 获取线程内函数执行返回的结果</span>
				<span>echo</span> <span>"ThreadId: <span><span>$key</span></span> => result: <span><span>{</span><span>$result</span><span>}</span></span> (End)\n"</span><span>;</span>
				<span>unset</span><span>(</span><span>$threads</span><span>[</span><span>$key</span><span>]</span><span>)</span><span>;</span>
			<span>}</span>
		<span>}</span>
		<span>sleep</span><span>(</span><span>$sleep</span><span>)</span><span>;</span>
	<span>}</span>
<span>}</span>


<span>start_threads</span><span>(</span><span>$list</span><span>,</span> <span>$producer</span><span>,</span> <span>10</span><span>,</span> <span>[</span><span>'redis'</span> <span>=></span> <span>$redis</span><span>]</span><span>,</span> <span>$path</span><span>,</span> <span>1</span><span>)</span><span>;</span>
</span></code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>tp6笔记</title>
      <link>https://doflam-z.github.io/php/tp6.html</link>
      <guid>https://doflam-z.github.io/php/tp6.html</guid>
      <source url="https://doflam-z.github.io/rss.xml">tp6笔记</source>
      <pubDate>Mon, 24 Mar 2025 02:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="tp6笔记" tabindex="-1"> tp6笔记</h1>
<h3 id="安装" tabindex="-1"> 安装</h3>
<p>先安装composer</p>
<div><pre><code><span>curl</span> <span>-sS</span> https://getcomposer.org/installer <span>|</span> php
<span>mv</span> composer.phar /usr/local/bin/composer
</code></pre><div aria-hidden="true"><div></div><div></div></div></div><p>安装项目</p>
<div><pre><code><span>composer</span> create-project topthink/think tp
</code></pre><div aria-hidden="true"><div></div></div></div><p>测试运行</p>
<div><pre><code>php think run
</code></pre><div aria-hidden="true"><div></div></div></div><p>安装扩展</p>
<div><pre><code><span>composer</span> require topthink/think-migration
</code></pre><div aria-hidden="true"><div></div></div></div><p>创建文件</p>
<div><pre><code>php think migrate:create ArticleTable
</code></pre><div aria-hidden="true"><div></div></div></div><p>进入database目录修改代码</p>
<div><pre><code>public <span>function</span> <span>change</span><span>(</span><span>)</span>
<span>{</span>
    // create the table
    <span>$table</span>  <span>=</span>  <span>$this</span>-<span>></span>table<span>(</span><span>'article'</span><span>)</span><span>;</span>
    <span>$table</span>-<span>></span>addColumn<span>(</span><span>'title'</span>, <span>'string'</span>, <span>[</span><span>'comment'</span> <span>=</span><span>></span> <span>'文章标题'</span><span>]</span><span>)</span>
    -<span>></span>addColumn<span>(</span><span>'body'</span>, <span>'text'</span>, <span>[</span><span>'comment'</span> <span>=</span><span>></span> <span>'文章内容'</span><span>]</span><span>)</span>
    -<span>></span>addTimestamps<span>(</span><span>)</span>
    -<span>></span>create<span>(</span><span>)</span><span>;</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>运行建表</p>
<div><pre><code>php think migrate:run
</code></pre><div aria-hidden="true"><div></div></div></div><p>生成控制器、模型</p>
<div><pre><code> php think make:controller index@Demo 
 php think make:model Demo
</code></pre><div aria-hidden="true"><div></div><div></div></div></div><p>安装包</p>
<div><pre><code>composer install --ignore-platform-reqs
</code></pre><div aria-hidden="true"><div></div></div></div><h4 id="多应用" tabindex="-1"> 多应用</h4>
<p>安装多应用扩展，创建应用目录</p>
<div><pre><code><span>composer</span> require topthink/think-multi-app 
php think build adimn
</code></pre><div aria-hidden="true"><div></div><div></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>Python笔记</title>
      <link>https://doflam-z.github.io/python/Python.html</link>
      <guid>https://doflam-z.github.io/python/Python.html</guid>
      <source url="https://doflam-z.github.io/rss.xml">Python笔记</source>
      <pubDate>Mon, 24 Mar 2025 02:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="python笔记" tabindex="-1"> Python笔记</h1>
<h3 id="pip导出、安装依赖" tabindex="-1"> PIP导出、安装依赖</h3>
<blockquote>
<p>pip修改软件源为清华源，pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</p>
</blockquote>
<div><pre><code>pip freeze <span>></span> requirements.txt
pip <span>install</span> <span>-r</span> requirements.txt
</code></pre><div aria-hidden="true"><div></div><div></div></div></div><h3 id="使用-pyenv-安装管理多个-python版本" tabindex="-1"> 使用 pyenv 安装管理多个 Python版本</h3>
<p><strong>pyenv 的作用</strong></p>
<p>pyenv 是一个 <strong>Python 版本管理工具</strong>，可以让你轻松地在同一台机器上安装和切换多个 Python 版本，而不会影响系统自带的 Python。</p>
<p><strong>💡 pyenv 能做什么？</strong></p>
<p><strong>1️⃣ 在同一台电脑上安装多个 Python 版本</strong></p>
<p>比如你的系统默认是 Python 3.8，但你想在不同项目中使用 Python 3.10 或 3.12，就可以用 pyenv 轻松管理：</p>
<div><pre><code>pyenv install 3.10.13
pyenv install 3.12.1
</code></pre><div aria-hidden="true"><div></div><div></div></div></div><p><strong>2️⃣ 让不同项目使用不同的 Python 版本</strong></p>
<p>你可以为每个项目指定不同的 Python 版本，避免兼容性问题：</p>
<div><pre><code>cd my_project
pyenv local 3.10.13  # 这个项目用 Python 3.10
</code></pre><div aria-hidden="true"><div></div><div></div></div></div><p>另一个项目可以使用 Python 3.12：</p>
<div><pre><code>cd another_project
pyenv local 3.12.1  # 这个项目用 Python 3.12
</code></pre><div aria-hidden="true"><div></div><div></div></div></div><p>这样，每个项目的 Python 版本都是独立的，不会互相干扰。</p>
<p><strong>3️⃣ 替换系统默认的 Python</strong></p>
<p>在不改动系统自带 Python 的情况下，使用自己安装的 Python 版本：</p>
<div><pre><code>pyenv global 3.12.1  # 让整个用户环境默认使用 Python 3.12.1
</code></pre><div aria-hidden="true"><div></div></div></div><p>如果想恢复系统默认的 Python：</p>
<div><pre><code>pyenv global system
</code></pre><div aria-hidden="true"><div></div></div></div><p><strong>4️⃣ 解决 sudo apt install python3-distutils 找不到的问题</strong></p>
<p>有时候 Ubuntu 官方的软件库没有提供最新的 Python 版本或者某些组件（如 distutils）。用 pyenv 安装 Python 可以绕开这个问题，比如：</p>
<div><pre><code>pyenv install 3.11.6  # 安装 Python 3.11.6
pyenv global 3.11.6  # 设为默认 Python 版本
</code></pre><div aria-hidden="true"><div></div><div></div></div></div><p>然后你就可以使用 pip 正常安装 lxml 了：</p>
<div><pre><code>pip install lxml
</code></pre><div aria-hidden="true"><div></div></div></div><hr>
<p><strong>🚀 pyenv 安装 &amp; 使用</strong></p>
<p><strong>1️⃣ 安装 pyenv</strong></p>
<p><strong>🔹 Ubuntu / Debian</strong></p>
<div><pre><code><span>curl</span> https://pyenv.run <span>|</span> <span>bash</span>

<span>#如果github无法访问，可以去gitee上找pyenv的镜像，clone到本地</span>
<span>git</span> clone https://gitee.com/mouday/pyenv.git ~/.pyenv
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div></div></div><p>然后添加以下内容到 ~/.bashrc 或 ~/.bash_profile：</p>
<div><pre><code>export PATH="$HOME/.pyenv/bin:$PATH"
eval "$(pyenv init --path)"
eval "$(pyenv virtualenv-init -)"
</code></pre><div aria-hidden="true"><div></div><div></div><div></div></div></div><p>然后运行：</p>
<div><pre><code>exec $SHELL  # 重新加载 shell
</code></pre><div aria-hidden="true"><div></div></div></div><p><strong>🔹 Mac（使用 Homebrew 安装）</strong></p>
<div><pre><code>brew install pyenv
echo 'eval "$(pyenv init --path)"' >> ~/.zshrc
source ~/.zshrc
</code></pre><div aria-hidden="true"><div></div><div></div><div></div></div></div><p><strong>2️⃣ 使用 pyenv 安装 Python</strong></p>
<div><pre><code><span># 安装python开发库</span>
<span>sudo</span> yum <span>install</span> libffi-devel
pyenv <span>install</span> <span>3.12</span>.1 
pyenv global <span>3.12</span>.1 <span># 全局使用</span>
pyenv <span>local</span> <span>3.12</span>.1 <span># 当前项目使用</span>
python <span>--version</span>  <span># 确保使用的是 pyenv 版本</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p><strong>🛠️ 总结</strong></p>
<p>🔹 <strong>pyenv = Python 版本管理器</strong>，让你可以安装、切换多个 Python 版本。</p>
<p>🔹 <strong>避免破坏系统 Python</strong>，不会影响 apt 或 yum 管理的 Python。</p>
<p>🔹 <strong>解决依赖问题</strong>，如 distutils 缺失、pip 版本冲突等。</p>
<p>🔹 <strong>每个项目可以有自己的 Python 版本</strong>，避免不同 Python 版本的兼容性问题。</p>
<h3 id="python-编译缺失了多个重要模块" tabindex="-1"> Python 编译缺失了多个重要模块</h3>
<blockquote>
<p>Python 编译缺失了多个重要模块，包括 _curses（ncurses）、readline（GNU Readline）、_sqlite3（SQLite3）和 _lzma（LZMA）。这些问题通常是因为缺少必要的 系统依赖，所以你需要安装它们后重新编译 Python。</p>
</blockquote>
<p>解决方案</p>
<ol>
<li>安装缺失的系统依赖</li>
</ol>
<p>在 Ubuntu/Debian 上运行：</p>
<div><pre><code><span>sudo</span> <span>apt</span> update <span>&amp;&amp;</span> <span>sudo</span> <span>apt</span> <span>install</span> <span>-y</span> <span>\</span>
    libbz2-dev <span>\</span>
    liblzma-dev <span>\</span>
    libsqlite3-dev <span>\</span>
    libncurses5-dev <span>\</span>
    libncursesw5-dev <span>\</span>
    libreadline-dev <span>\</span>
    xz-utils <span>\</span>
    tk-dev
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>在 CentOS/RHEL 上：</p>
<div><pre><code><span>sudo</span> yum <span>install</span> <span>-y</span> <span>\</span>
    bzip2-devel <span>\</span>
    xz-devel <span>\</span>
    sqlite-devel <span>\</span>
    ncurses-devel <span>\</span>
    readline-devel <span>\</span>
    xz <span>\</span>
    tk-devel
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><ol start="2">
<li>强制重新编译 Python</li>
</ol>
<p>安装完依赖后，重新编译 Python：</p>
<div><pre><code><span>CFLAGS</span><span>=</span><span>"-I/usr/include -I/usr/include/bz2 -I/usr/include/lzma -I/usr/include/ncurses -I/usr/include/readline -I/usr/include/sqlite3"</span> <span>\</span>
pyenv <span>install</span> <span>3.9</span>.7 <span>--force</span>
</code></pre><div aria-hidden="true"><div></div><div></div></div></div><ol start="3">
<li>激活 Python 并检查模块</li>
</ol>
<p>安装完成后，检查 Python 是否正确编译了所有模块：</p>
<div><pre><code>pyenv <span>local</span> <span>3.9</span>.7

python3 <span>-c</span> <span>"import bz2, lzma, sqlite3, readline, curses"</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div></div></div><p>如果没有报错，说明一切正常！</p>
<h3 id="安装virtualenv虚拟环境" tabindex="-1"> 安装virtualenv虚拟环境</h3>
<p>安装virtualenv</p>
<div><pre><code>pip3 <span>install</span> virtualenv
</code></pre><div aria-hidden="true"><div></div></div></div><p>创建项目目录app同时创建一个名为venv的虚拟环境，进入环境</p>
<div><pre><code><span>#mac</span>
pip <span>install</span> virtualenv
python3 <span>-m</span> venv venv
<span>source</span> venv/bin/activate

<span>#win</span>
<span>#打开命令行输入 Set-ExecutionPolicy RemoteSigned</span>
pip <span>install</span> virtualenv
pip <span>install</span> virtualenvwrapper
<span>cd</span> app
virtualenv venv
<span>#进入虚拟环境</span>
.<span>\</span>venv<span>\</span>Scripts<span>\</span>activate
<span>#离开虚拟环境</span>
.<span>\</span>venv<span>\</span>Scripts<span>\</span>deactivate
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>退出虚拟环境</p>
<div><pre><code>deactivate
</code></pre><div aria-hidden="true"><div></div></div></div><h3 id="安装scrapy" tabindex="-1"> 安装Scrapy</h3>
<div><pre><code><span>#先安装依赖</span>
pip <span>install</span> wheel lxml pyOpenSSL Twisted
pip <span>install</span> <span>install</span> Scrapy

<span># 或者直接导入依赖文本</span>
pip <span>install</span> <span>-r</span> requirements.txt

<span>#创建项目</span>
scrapy startproject tutorial

<span>#创建第一个爬虫文件，指定域名</span>
scrapy genspider zhipin <span>"zhipin.com"</span>

<span>#创建一个XMLFeedSpider爬虫文件</span>
scrapy genspider <span>-t</span> xmlfeed lagou lagou.com

<span>#运行一个爬虫程序，输出到文件</span>
scrapy crawl mininova <span>-o</span> scraped_data.json 

<span>#运行一个爬虫程序，将日志输出到指定目录</span>
scrpay crawl spider_name  <span>-s</span> <span>LOG_FILE</span><span>=</span>all.log

<span>#配置文件settings.py</span>
<span>#开启下载器中间件，数值越小越接近控制器</span>
DOWNLOADER_MIDDLEWARES <span>=</span> <span>{</span>
    <span>'companyProfile.middlewares.CompanyprofileDownloaderMiddleware'</span><span>:</span> None,
    <span>'companyProfile.middlewares.AgentDownloaderMiddleware'</span><span>:</span> <span>543</span>,
    <span>'companyProfile.middlewares.SeleniumDownloaderMiddleware'</span><span>:</span> <span>643</span>,
<span>}</span>

<span>#开启管道</span>
ITEM_PIPELINES <span>=</span> <span>{</span>
   <span>'companyProfile.pipelines.CompanyprofilePipeline'</span><span>:</span> <span>300</span>,
<span>}</span>


</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id="selenium需要chrome驱动" tabindex="-1"> selenium需要chrome驱动</h3>
<div><pre><code><span># 安装chrome</span>
<span>sudo</span> <span>wget</span> https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
<span>sudo</span> <span>apt</span> <span>install</span> ./google-chrome-stable_current_amd64.deb
<span># 下载驱动</span>
<span>sudo</span> <span>wget</span> https://chromedriver.storage.googleapis.com/101.0.4951.41/chromedriver_linux64.zip
<span># 解压直接使用</span>
<span>sudo</span> <span>unzip</span> chromedriver_linux64.zip
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id="安装爬虫需要的库" tabindex="-1"> 安装爬虫需要的库</h3>
<div><pre><code> pip <span>install</span> beautifulsoup4 
 pip <span>install</span> requests
 pip <span>install</span> selenium
 pip <span>install</span> fake-useragent
 pip <span>install</span> redis
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div></div></div><h3 id="安装mysql-peewee-orm库" tabindex="-1"> 安装mysql peewee ORM库</h3>
<div><pre><code>pip <span>install</span> pymysql
pip <span>install</span> peewee
</code></pre><div aria-hidden="true"><div></div><div></div></div></div><h5 id="peewee生成module文件" tabindex="-1"> peewee生成module文件</h5>
<div><pre><code>python <span>-m</span> pwiz <span>-e</span> mysql <span>-H</span> localhost <span>-p</span> <span>3306</span> <span>-u</span> 数据库用户名 <span>-P</span> 数据库密码 <span>-t</span> 表名<span>(</span>table name<span>)</span> 库名<span>(</span>database name<span>)</span> <span>></span> 要生成的python文件名称.py
python <span>-m</span> pwiz <span>-e</span> mysql <span>-H</span> <span>192.168</span>.1.14 <span>-p</span> <span>3306</span> <span>-u</span> jobSnatch_r <span>-P</span> <span>-t</span> tb_company_info jobui_snatch_company <span>></span> tb_company_info.py

python <span>-m</span> pwiz <span>-e</span> mysql <span>-H</span> <span>192.168</span>.1.14 <span>-p</span> <span>3306</span> <span>-u</span> jobSnatch_r <span>-P</span> <span>-t</span> tb_company_content jobui_snatch_company <span>></span> tb_company_info.py

python <span>-m</span> pwiz <span>-e</span> mysql <span>-H</span> <span>121.9</span>.201.145 <span>-p</span> <span>3307</span> <span>-u</span> jobSnatch_w <span>-P</span> <span>-t</span> tb_company_status jobui_snatch_company <span>></span> tb_company_status.py
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>生成的文件需要转成utf-8文件格式</p>
<div><pre><code>database = MySQLDatabase('jobui_snatch_company', host="192.168.1.14", user='jobSnatch_r', passwd='j89#do@k', port=3306)
</code></pre><div aria-hidden="true"><div></div></div></div><div><pre><code>database = MySQLDatabase('jobui_snatch_company', host="192.168.1.14", user='jobSnatch_r', passwd='j89#do@k', port=3306)
</code></pre><div aria-hidden="true"><div></div></div></div><h3 id="安装mongodb-orm库" tabindex="-1"> 安装mongodb ORM库</h3>
<div><pre><code><span>#安装pymongo3.12.3，最新版本验证会报错</span>
pip install  pymongo<span>==</span><span>3.12</span><span>.3</span>
<span>#安装MongoEngine</span>
python <span>-</span>m pip install mongoengine

<span>#连接</span>
<span>from</span> mongoengine <span>import</span> <span>*</span>
<span>from</span> env <span>import</span> <span>*</span>

db <span>=</span> <span>'jobui_tmp'</span>
config <span>=</span> Env<span>.</span>get_db_config<span>(</span>db<span>)</span>
connect<span>(</span>db<span>,</span> <span>**</span>config<span>)</span>


<span>class</span> <span>CompanyProfile</span><span>(</span>Document<span>)</span><span>:</span>
    _id <span>=</span> IntField<span>(</span>primary_key<span>=</span><span>True</span><span>)</span>  <span># 公司id</span>
    name <span>=</span> StringField<span>(</span><span>)</span>  <span># 公司名</span>
    domain <span>=</span> StringField<span>(</span><span>)</span>  <span># 来源网址</span>
    content <span>=</span> StringField<span>(</span><span>)</span>  <span># 公司介绍</span>

    meta <span>=</span> <span>{</span>
        <span>'indexes'</span><span>:</span> <span>[</span>  <span># 建索引</span>
            <span>'name'</span><span>,</span>
            <span>'domain'</span><span>,</span>
            <span>'content'</span>
        <span>]</span>
    <span>}</span>

<span>##如果有主键字段，则主键字段不能设置为AutoField类型，会导致插入语句异常</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>shell</title>
      <link>https://doflam-z.github.io/linux/shell.html</link>
      <guid>https://doflam-z.github.io/linux/shell.html</guid>
      <source url="https://doflam-z.github.io/rss.xml">shell</source>
      <pubDate>Fri, 21 Mar 2025 02:03:08 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="shell" tabindex="-1"> shell</h1>
<h3 id="查看系统当前使用的shell、查看系统有哪些shell" tabindex="-1"> 查看系统当前使用的shell、查看系统有哪些shell</h3>
<div><pre><code><span>echo</span> <span>$SHELL</span>
<span>cat</span> /etc/shells
</code></pre><div aria-hidden="true"><div></div><div></div></div></div><h3 id="安装zsh" tabindex="-1"> 安装zsh</h3>
<div><pre><code><span>sudo</span> <span>apt</span> <span>install</span> <span>zsh</span> <span>-y</span>
</code></pre><div aria-hidden="true"><div></div></div></div><blockquote>
<p>设置为默认shell</p>
</blockquote>
<div><pre><code>chsh <span>-s</span> /bin/zsh
</code></pre><div aria-hidden="true"><div></div></div></div><h3 id="安装oh-my-zsh" tabindex="-1"> 安装oh my zsh</h3>
<div><pre><code><span>sh</span> <span>-c</span> <span>"<span><span>$(</span><span>curl</span> <span>-fsSL</span> https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh<span>)</span></span>"</span>
</code></pre><div aria-hidden="true"><div></div></div></div><h3 id="配置主题" tabindex="-1"> 配置主题</h3>
<blockquote>
<p>将 <code>ZSH_THEME=&quot;robbyrussell&quot;</code> 修改为 <code>ZSH_THEME=&quot;ys&quot;</code> ，ys这个主题比较简约,修改之后重新加载配置文件 <code>source ~/.zshrc</code>主题链接https://github.com/ohmyzsh/ohmyzsh/wiki/Themes</p>
</blockquote>
<p>安装 <strong>Oh My Zsh</strong>（推荐）</p>
<div><pre><code>sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
</code></pre><div aria-hidden="true"><div></div></div></div><p>下载 Powerlevel10k 主题：</p>
<div><pre><code>git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k
</code></pre><div aria-hidden="true"><div></div></div></div><p>编辑 ~/.zshrc 文件：</p>
<div><pre><code>ZSH_THEME="powerlevel10k/powerlevel10k"
</code></pre><div aria-hidden="true"><div></div></div></div><p>重新加载配置：</p>
<div><pre><code>source ~/.zshrc
</code></pre><div aria-hidden="true"><div></div></div></div><h3 id="安装插件" tabindex="-1"> 安装插件</h3>
<blockquote>
<p>安装命令补全、命令高亮显示插件</p>
</blockquote>
<p>下载</p>
<div><pre><code><span>git</span> clone https://github.com/zsh-users/zsh-autosuggestions <span>${ZSH_CUSTOM<span>:-</span>$HOME<span>/</span>.oh-my-zsh<span>/</span>custom}</span>/plugins/zsh-autosuggestions

<span>git</span> clone https://github.com/zsh-users/zsh-syntax-highlighting <span>${ZSH_CUSTOM<span>:-</span>~<span>/</span>.oh-my-zsh<span>/</span>custom}</span>/plugins/zsh-syntax-highlighting
</code></pre><div aria-hidden="true"><div></div><div></div><div></div></div></div><p>开启</p>
<div><pre><code><span>vi</span> ~/.zshrc
<span># 开启插件</span>
<span>plugins</span><span>=</span><span>(</span>git z zsh-syntax-highlighting zsh-autosuggestions<span>)</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>Jenkins</title>
      <link>https://doflam-z.github.io/services/jenkins.html</link>
      <guid>https://doflam-z.github.io/services/jenkins.html</guid>
      <source url="https://doflam-z.github.io/rss.xml">Jenkins</source>
      <pubDate>Fri, 03 Jan 2025 03:01:21 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="jenkins" tabindex="-1"> Jenkins</h1>
<p>Job Pll</p>
<div><pre><code><span>#!/bin/bash</span>

<span>jobuiphpdir</span><span>=</span><span>"jobuiV4 baseClassV4 Thrift captcha"</span>
<span>jobuihtmldir</span><span>=</span><span>"jobuiV4_html"</span>

<span>cd</span> /web/software/jenkins/workspace/jobui

<span>#更新本地仓库到最新改动</span>
<span>process</span><span>=</span><span><span>`</span>pgrep <span>git</span><span>`</span></span>
<span>echo</span> <span>"###################"</span> <span>>></span> /tmp/coding.log
<span>date</span> <span>"+%Y%m%d %H:%M:%S"</span> <span>>></span> /tmp/coding.log
<span>#判断git pull进程是否存在</span>
<span>if</span> <span>[</span> <span>-n</span> <span>"<span>$process</span>"</span> <span>]</span><span>;</span><span>then</span>
        <span>echo</span> <span>"git pull is exist"</span> <span>>></span> /tmp/coding.log
        <span>exit</span>
<span>fi</span>
<span>git</span> pull origin master <span>>></span> /tmp/coding.log  <span><span>2</span>></span><span>&amp;1</span> <span>&amp;</span>

<span>sleep</span> <span>1</span>

<span>#判断git pull命令是否运行完成</span>
<span>while</span> <span>true</span>
<span>do</span>
        <span>process</span><span>=</span><span><span>`</span>pgrep <span>git</span><span>`</span></span>
        <span>#[ -n str] 当字符串长度大于0返回真 </span>
        <span>if</span> <span>[</span> <span>-n</span> <span>"<span>$process</span>"</span> <span>]</span><span>;</span> <span>then</span>
        <span>echo</span> <span>"git pull is running"</span> <span>>></span> /tmp/coding.log
        <span>sleep</span> <span>2</span>
<span>else</span>
        <span>echo</span> <span>"git pull is over"</span> <span>>></span> /tmp/coding.log
        <span>break</span>
        <span>fi</span>
<span>done</span>


<span>if</span> <span>[</span> <span>"<span>$USER</span>"</span> <span>=</span> <span>"jobui"</span> <span>]</span><span>;</span><span>then</span>
    <span>for</span> <span>jpdir</span> <span>in</span> <span>$jobuiphpdir</span>
    <span>do</span>
        <span>if</span> <span>[</span> <span>!</span> <span>-z</span> <span>"<span>$jpdir</span>"</span> <span>]</span> <span>;</span><span>then</span>
            <span>echo</span> <span>-e</span> <span>"<span title="\n">\n</span>-------------------- /projectPHP/<span>$jpdir</span> 的同步内容如下 --------------------<span title="\n">\n</span>"</span>
            <span>rsync</span> <span>-av</span> <span>--delete</span> --exclude-from<span>=</span>/web/software/jenkins/workspace/jobui/.gitignore <span>$jpdir</span> /web/php/projectPHP/
        <span>fi</span>
    <span>done</span>

    <span>for</span> <span>jhdir</span> <span>in</span> <span>$jobuihtmldir</span>
    <span>do</span>
        <span>if</span> <span>[</span> <span>!</span> <span>-z</span> <span>"<span>$jhdir</span>"</span> <span>]</span> <span>;</span><span>then</span>
            <span>echo</span> <span>-e</span> <span>"<span title="\n">\n</span>-------------------- /projectHTML/<span>$jhdir</span> 的同步内容如下 --------------------<span title="\n">\n</span>"</span>
            <span>rsync</span> <span>-av</span> <span>--delete</span> --exclude-from<span>=</span>/web/software/jenkins/workspace/jobui/.gitignore <span>$jhdir</span> /web/php/projectHTML/
        <span>fi</span>
    <span>done</span>
<span>else</span>
    <span>echo</span> <span>"you are <span>$USER</span> not jobui,change to the user and run it <span title="\n">\n</span>"</span>
    <span>exit</span>
<span>fi</span>

<span>#rm -rf /dev/shm/nginx-data/proxy_cache_dir/*</span>

<span>exit</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>Jobui pub</p>
<div><pre><code><span>#!/bin/bash</span>

<span>jobuiphpdir</span><span>=</span><span>"jobuiV4 baseClassV4 captcha"</span>
<span>jobuihtmldir</span><span>=</span><span>"jobuiV4_html"</span>

<span>time</span><span>=</span><span><span>`</span><span>date</span><span>`</span></span>
<span>echo</span> <span>"start at <span>$time</span> ######################<span title="\n">\n</span>"</span>
<span>echo</span> <span>"####### rsync jobui start #######<span title="\n">\n</span>"</span>

<span>ip</span><span>=</span><span>"132 133 134 135 136 137 138 141 144"</span>

<span>for</span> <span>var</span> <span>in</span> <span>$ip</span>
<span>do</span>
    <span>echo</span> <span>-e</span> <span>"<span title="\n">\n</span><span title="\n">\n</span>=======================================<span title="\n">\n</span>jobuiV4同步目标机器:192.168.2.<span>$var</span> <span title="\n">\n</span>"</span>
    <span>cd</span> /web/php/projectPHP
    <span>for</span> <span>jpdir</span> <span>in</span> <span>$jobuiphpdir</span>
    <span>do</span>
        <span>echo</span> <span>-e</span> <span>"<span title="\n">\n</span>-------------------- /projectPHP/<span>$jpdir</span> 同步开始 --------------------<span title="\n">\n</span>"</span>
        <span>if</span> <span>[</span> <span>!</span> <span>-z</span> <span>"<span>$jpdir</span>"</span> <span>]</span> <span>;</span><span>then</span>
                <span>rsync</span> <span>-av</span>  <span>--delete</span> <span>$jpdir</span> <span>'-e ssh -p 60011'</span> jobui@192.168.2.<span>$var</span>:/web/php/projectPHP/ <span>>></span> /tmp/jobui_rxync_remote.log
        <span>fi</span>
    <span>done</span>
    <span>cd</span> /web/php/projectHTML
    <span>for</span> <span>jhdir</span> <span>in</span> <span>$jobuihtmldir</span>
    <span>do</span>
        <span>echo</span> <span>-e</span> <span>"<span title="\n">\n</span><span title="\n">\n</span>------------------ /projectHTML/<span>$jhdir</span> 同步开始 --------------------<span title="\n">\n</span>"</span>
        <span>if</span> <span>[</span> <span>!</span> <span>-z</span> <span>"<span>$jhdir</span>"</span> <span>]</span> <span>;</span><span>then</span>
                <span>rsync</span> <span>-av</span>  <span>--delete</span> <span>$jhdir</span> <span>'-e ssh -p 60011'</span> jobui@192.168.2.<span>$var</span>:/web/php/projectHTML/ <span>>></span> /tmp/jobui_rxync_remote.log
        <span>fi</span>
    <span>done</span>
<span>done</span>
<span>echo</span> <span>"####### rsync jobui end #######"</span>
<span>exit</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>network</title>
      <link>https://doflam-z.github.io/linux/network.html</link>
      <guid>https://doflam-z.github.io/linux/network.html</guid>
      <source url="https://doflam-z.github.io/rss.xml">network</source>
      <pubDate>Mon, 26 Feb 2024 10:08:55 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="network" tabindex="-1"> network</h1>
<blockquote>
<p>网络相关命令</p>
</blockquote>
<h3 id="查看网络实时流量" tabindex="-1"> 查看网络实时流量</h3>
<div><pre><code><span>sudo</span> iftop <span>-i</span> eno3
</code></pre><div aria-hidden="true"><div></div></div></div><blockquote>
<p>-i 指定网卡</p>
</blockquote>
<h3 id="查看tcp、udp连接数" tabindex="-1"> 查看tcp、udp连接数</h3>
<div><pre><code><span>sudo</span> <span>netstat</span> <span>-an</span> <span>|</span> <span>grep</span> tcp <span>|</span> <span>wc</span> <span>-l</span>
<span>sudo</span> <span>netstat</span> <span>-anu</span> <span>|</span> <span>grep</span> udp <span>|</span> <span>wc</span> <span>-l</span>
</code></pre><div aria-hidden="true"><div></div><div></div></div></div><blockquote>
<p>这个命令的含义是：</p>
<ul>
<li><code>netstat -an</code>：列出系统上的所有网络连接，包括 TCP 和 UDP 连接。</li>
<li><code>grep tcp</code>：筛选出 TCP 连接的行。</li>
<li><code>wc -l</code>：对筛选后的行数进行统计，即计算 TCP 连接的数量</li>
</ul>
</blockquote>
<h3 id="查看tcp错误数" tabindex="-1"> 查看tcp错误数</h3>
<div><pre><code><span>sudo</span> <span>netstat</span> <span>-s</span> <span>|</span> <span>grep</span> <span>-i</span> error
</code></pre><div aria-hidden="true"><div></div></div></div><h3 id="抓包到指定端口的数据包" tabindex="-1"> 抓包到指定端口的数据包</h3>
<div><pre><code><span>sudo</span> tcpdump <span>-i</span> eno3 <span>-nn</span> <span>-vvv</span> <span>'host 192.168.2.134 and port 12000'</span>
</code></pre><div aria-hidden="true"><div></div></div></div><blockquote>
<p>这个命令的含义是：</p>
<ul>
<li><code>-i &lt;interface&gt;</code>：指定监视的网络接口。</li>
<li><code>-nn</code>：禁用域名解析，显示IP地址而不是主机名。</li>
<li><code>-vvv</code>：增加详细级别，显示更多的信息。</li>
<li><code>'host &lt;host_ip&gt; and port &lt;port&gt;'</code>：过滤出指定主机和端口的流量</li>
</ul>
</blockquote>
]]></content:encoded>
    </item>
    <item>
      <title>vim</title>
      <link>https://doflam-z.github.io/linux/vim.html</link>
      <guid>https://doflam-z.github.io/linux/vim.html</guid>
      <source url="https://doflam-z.github.io/rss.xml">vim</source>
      <pubDate>Mon, 26 Feb 2024 10:08:55 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="vim" tabindex="-1"> vim</h1>
<h3 id="查找" tabindex="-1"> 查找</h3>
<p>在 normal 模式下按下 <code>/</code> 即可进入查找模式，输入要查找的字符串并按下回车。 Vim 会跳转到第一个匹配。按下 <code>n</code> 查找下一个，按下 <code>N</code> 查找上一个。</p>
<p>Vim 查找支持正则表达式，例如 <code>/vim$</code> 匹配行尾的 <code>&quot;vim&quot;</code>。 需要查找特殊字符需要转义，例如 <code>/vim\$</code> 匹配 <code>&quot;vim$&quot;</code>。</p>
<blockquote>
<p>注意查找回车应当用 <code>\n</code>，而替换为回车应当用 <code>\r</code>（相当于 <code>&lt;CR&gt;</code>）。</p>
</blockquote>
<p><strong>其他查找模式</strong></p>
<ul>
<li><code>?</code>（按住 Shift + <code>/</code>）往上查找。</li>
<li><code>q/</code> 查看查找历史，选中一项后回车可以重新查找。</li>
<li><code>q?</code> 查看向上查找历史。</li>
</ul>
<h3 id="大小写敏感查找" tabindex="-1"> 大小写敏感查找</h3>
<p>在查找模式中加入 <code>\c</code> 表示大小写不敏感查找，<code>\C</code> 表示大小写敏感查找。例如：</p>
<div><pre><code>/foo\c
</code></pre><div aria-hidden="true"><div></div></div></div><p>将会查找所有的 <code>&quot;foo&quot;</code>, <code>&quot;FOO&quot;</code>, <code>&quot;Foo&quot;</code> 等字符串。</p>
<h3 id="大小写敏感配置" tabindex="-1"> 大小写敏感配置</h3>
<p>Vim 默认采用大小写敏感的查找，为了方便我们常常将其配置为大小写不敏感：</p>
<div><pre><code>" 设置默认进行大小写不敏感查找
set ignorecase
" 如果有一个大写字母，则切换到大小写敏感查找
set smartcase 
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div></div></div><blockquote>
<p>将上述设置粘贴到你的 <code>~/.vimrc</code>，重新打开 Vim 即可生效。</p>
</blockquote>
<h3 id="查找当前单词" tabindex="-1"> 查找当前单词</h3>
<p>在 normal 模式下按下 <code>*</code> 即可查找光标所在单词（word）， 要求每次出现的前后为空白字符或标点符号。例如当前为 <code>foo</code>， 可以匹配 <code>foo bar</code> 中的 <code>foo</code>，但不可匹配 <code>foobar</code> 中的 <code>foo</code>。 这在查找函数名、变量名时非常有用。</p>
<p>按下 <code>g*</code> 即可查找光标所在单词的字符序列，每次出现前后字符无要求。 即 <code>foo bar</code> 和 <code>foobar</code> 中的 <code>foo</code> 均可被匹配到。</p>
<h3 id="其他设置" tabindex="-1"> 其他设置</h3>
<p><code>:set incsearch</code> 可以在敲键的同时搜索，按下回车把移动光标移动到匹配的词； 按下 Esc 取消搜索。</p>
<p><code>:set wrapscan</code> 用来设置到文件尾部后是否重新从文件头开始搜索。</p>
<h2 id="查找与替换" tabindex="-1"> 查找与替换</h2>
<p><code>:s</code>（substitute）命令用来查找和替换字符串。语法如下：</p>
<div><pre><code>:{作用范围}s/{目标}/{替换}/{替换标志}
</code></pre><div aria-hidden="true"><div></div></div></div><p>例如 <code>:%s/foo/bar/g</code> 会在全局范围(<code>%</code>)查找 <code>foo</code> 并替换为 <code>bar</code>，所有出现都会被替换（<code>g</code>）。</p>
<h3 id="作用范围" tabindex="-1"> 作用范围</h3>
<p>作用范围分为当前行、全文、选区等等。</p>
<p>当前行：</p>
<div><pre><code>:s/foo/bar/g
</code></pre><div aria-hidden="true"><div></div></div></div><p>全文：</p>
<div><pre><code>:%s/foo/bar/g
</code></pre><div aria-hidden="true"><div></div></div></div><p>选区，在 Visual 模式下选择区域后输入 <code>:</code>，Vim 即可自动补全为 <code>:'&lt;,'&gt;</code>。</p>
<div><pre><code>:'&lt;,'>s/foo/bar/g
</code></pre><div aria-hidden="true"><div></div></div></div><p>2-11 行：</p>
<div><pre><code>:5,12s/foo/bar/g
</code></pre><div aria-hidden="true"><div></div></div></div><p>当前行 <code>.</code> 与接下来两行 <code>+2</code>：</p>
<div><pre><code>:.,+2s/foo/bar/g
</code></pre><div aria-hidden="true"><div></div></div></div><h3 id="替换标志符" tabindex="-1"> 替换标志符</h3>
<p>上文中命令结尾的 <code>g</code> 即是替换标志之一，表示全局 <code>global</code> 替换（即替换目标的所有出现）。 还有很多其他有用的替换标志：</p>
<p>空替换标志表示只替换从光标位置开始，目标的第一次出现：</p>
<div><pre><code>:%s/foo/bar
</code></pre><div aria-hidden="true"><div></div></div></div><p><code>i</code> 表示大小写不敏感查找，<code>I</code> 表示大小写敏感：</p>
<div><pre><code>:%s/foo/bar/i
# 等效于模式中的\c（不敏感）或\C（敏感）
:%s/foo\c/bar
</code></pre><div aria-hidden="true"><div></div><div></div><div></div></div></div><p><code>c</code> 表示需要确认，例如全局查找 <code>&quot;foo&quot;</code> 替换为 <code>&quot;bar&quot;</code> 并且需要确认：</p>
<div><pre><code>:%s/foo/bar/gc
</code></pre><div aria-hidden="true"><div></div></div></div><p>回车后 Vim 会将光标移动到每一次 <code>&quot;foo&quot;</code> 出现的位置，并提示</p>
<div><pre><code>replace with bar (y/n/a/q/l/^E/^Y)?
</code></pre><div aria-hidden="true"><div></div></div></div><p>按下 <code>y</code> 表示替换，<code>n</code> 表示不替换，<code>a</code> 表示替换所有，<code>q</code> 表示退出查找模式， <code>l</code> 表示替换当前位置并退出。<code>^E</code> 与 <code>^Y</code> 是光标移动快捷键，参考： <a href="https://harttle.land/2015/11/07/vim-cursor.html" target="_blank" rel="noopener noreferrer">Vim 中如何快速进行光标移动</a>。</p>
<h2 id="高亮设置" tabindex="-1"> 高亮设置</h2>
<h3 id="高亮颜色设置" tabindex="-1"> 高亮颜色设置</h3>
<p>如果你像我一样觉得高亮的颜色不太舒服，可以在 <code>~/.vimrc</code> 中进行设置：</p>
<div><pre><code>highlight Search ctermbg=yellow ctermfg=black 
highlight IncSearch ctermbg=black ctermfg=yellow 
highlight MatchParen cterm=underline ctermbg=NONE ctermfg=NONE
</code></pre><div aria-hidden="true"><div></div><div></div><div></div></div></div><p>上述配置指定 Search 结果的前景色（foreground）为黑色，背景色（background）为灰色； 渐进搜索的前景色为黑色，背景色为黄色；光标处的字符加下划线。</p>
<blockquote>
<p>更多的 CTERM 颜色可以查阅：http://vim.wikia.com/wiki/Xterm256_color_names_for_console_Vim</p>
</blockquote>
<h3 id="禁用-启用高亮" tabindex="-1"> 禁用/启用高亮</h3>
<p>有木有觉得每次查找替换后 Vim 仍然高亮着搜索结果？ 可以手动让它停止高亮，在 normal 模式下输入：</p>
<div><pre><code>:nohighlight
" 等效于
:nohl
</code></pre><div aria-hidden="true"><div></div><div></div><div></div></div></div><p>其实上述命令禁用了所有高亮，只禁用搜索高亮的命令是 <code>:set nohlsearch</code>。 下次搜索时需要 <code>:set hlsearch</code> 再次启动搜索高亮。</p>
<h4 id="延时关闭高亮" tabindex="-1"> 延时关闭高亮</h4>
<p>怎么能够让 Vim 查找/替换后一段时间自动取消高亮，发生查找时自动开启呢？</p>
<div><pre><code>" 当光标一段时间保持不动了，就禁用高亮
autocmd cursorhold * set nohlsearch
" 当输入查找命令时，再启用高亮
noremap n :set hlsearch&lt;cr>n
noremap N :set hlsearch&lt;cr>N
noremap / :set hlsearch&lt;cr>/
noremap ? :set hlsearch&lt;cr>?
noremap * *:set hlsearch&lt;cr>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><blockquote>
<p>将上述配置粘贴到 <code>~/.vimrc</code>，重新打开 vim 即可生效。</p>
</blockquote>
<h4 id="一键关闭高亮" tabindex="-1"> 一键关闭高亮</h4>
<p>如果延时禁用搜索高亮仍然不够舒服，可以设置快捷键来一键禁用/开启搜索高亮：</p>
<div><pre><code>noremap n :set hlsearch&lt;cr>n
noremap N :set hlsearch&lt;cr>N
noremap / :set hlsearch&lt;cr>/
noremap ? :set hlsearch&lt;cr>?
noremap * *:set hlsearch&lt;cr>

nnoremap &lt;c-h> :call DisableHighlight()&lt;cr>
function! DisableHighlight()
    set nohlsearch
endfunc
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>希望关闭高亮时只需要按下 <code>Ctrl+H</code>，当发生下次搜索时又会自动启用。</p>
<h2 id="参考阅读" tabindex="-1"> 参考阅读</h2>
<ul>
<li>XTERM 256 色：http://vim.wikia.com/wiki/Xterm256_color_names_for_console_Vim</li>
<li>Vim Wikia - 查找与替换：http://vim.wikia.com/wiki/Search_and_replace</li>
<li>用 Vim 打造 IDE 环境：https://harttle.land/2015/11/04/vim-ide.html</li>
</ul>
<p>本文采用 <a href="http://creativecommons.org/licenses/by/4.0/" target="_blank" rel="noopener noreferrer">知识共享署名 4.0 国际许可协议</a>（CC-BY 4.0）进行许可，转载注明来源即可： https://harttle.land/2016/08/08/vim-search-in-file.html。如有疏漏、谬误、侵权请通过评论或 <a href="mailto:harttleharttle@gmail.com">邮件</a> 指出。</p>
]]></content:encoded>
    </item>
  </channel>
</rss>