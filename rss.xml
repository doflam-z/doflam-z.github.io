<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <atom:link href="https://doflam-z.github.io/rss.xml" rel="self" type="application/rss+xml"/>
    <title>CodeNote</title>
    <link>https://doflam-z.github.io/</link>
    <description>笔记网站。</description>
    <language>zh-CN</language>
    <pubDate>Tue, 25 Mar 2025 02:00:47 GMT</pubDate>
    <lastBuildDate>Tue, 25 Mar 2025 02:00:47 GMT</lastBuildDate>
    <generator>vuepress-plugin-feed2</generator>
    <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
    <item>
      <title>Laravel</title>
      <link>https://doflam-z.github.io/php/laravel.html</link>
      <guid>https://doflam-z.github.io/php/laravel.html</guid>
      <source url="https://doflam-z.github.io/rss.xml">Laravel</source>
      <pubDate>Mon, 24 Mar 2025 02:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="laravel" tabindex="-1"> Laravel</h1>
<h3 id="使用composer方式部署laravel项目" tabindex="-1"> 使用composer方式部署laravel项目</h3>
<p>切换国内镜像<a href="https://pkg.phpcomposer.com/" target="_blank" rel="noopener noreferrer">地址</a></p>
<div><pre><code><span>composer</span> config <span>-g</span> repo.packagist <span>composer</span> h <span>[</span>laravel.md<span>]</span><span>(</span>laravel.md<span>)</span> ttps://packagist.phpcomposer.com
</code></pre><div aria-hidden="true"><div></div></div></div><p>删除镜像（恢复官方源）</p>
<div><pre><code><span>composer</span> config <span>-g</span> <span>--unset</span> repos.packagist
</code></pre><div aria-hidden="true"><div></div></div></div><p>使用composer部署laravel项目</p>
<div><pre><code><span># 在当前目录的/project_2020-3-16下创建一个名为laravel的laravel项目，默认使用最新版本laravel，以压缩包形式从git上下载</span>
<span>composer</span> create-project laravel/laravel --prefer-dist ./project_2020-3-16

<span># 也可指定laravel版本</span>
<span>composer</span> create-project laravel/laravel<span>=</span><span>5.8</span>.* --prefer-dist ./project_2020-3-16
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div></div></div><p><strong>命令解释：</strong></p>
<p>composer：表示执行composer程序；</p>
<p>create-project：通过composer去创建项目；</p>
<p>laravel/Laravel：需要创建的项目名称；</p>
<p>--prefer-dist：优先下载压缩包方式，而不是直接从github上下载源码（克隆）；</p>
<p>./：表示创建的项目目录位置，也可以是一个目录名；</p>
<p>指定版本创建laravel：</p>
<p><code>composer create-project laravel/laravel=5.4.* --prefer-dist ./</code></p>
<p><strong>查看系统中已有的路由列表</strong>=&gt;在项目根目录输入 ：<code>php artisan route:list</code></p>
<p>路由群组写法：</p>
<p><code>Route::goup(['frefix'=&gt;'admin'],function(){</code></p>
<p>​		<code>Route::get('test',function(){ echo &quot;匹配/admin/test&quot;;})</code></p>
<p><code>});</code></p>
<p><strong>创建控制器</strong>TestController</p>
<p><code>php artisan make:controller TestController</code></p>
<p><strong>创建模型</strong>Test</p>
<p><code>php artisan make:model Home/Test</code></p>
<p><strong>No Application Encryption Key Has Been Specified</strong></p>
<ol>
<li>
<p>复制.env.example到.env：</p>
</li>
<li>
<p>cp -a .env.example .env</p>
</li>
<li>
<p>生成密钥：</p>
</li>
<li>
<p>php artisan key:generate</p>
</li>
<li>
<p>然后才运行：</p>
</li>
<li>
<p>php artisan serve</p>
</li>
</ol>
<p><strong>Php artisan make:auth command is not defined</strong></p>
<p>Follow these three steps
Step 1 - First do this:</p>
<p>laravel new project</p>
<p><code>cd project</code></p>
<p><code>composer require laravel/ui --dev</code>
Note: Laravel UI Composer package is a new first-party package that extracts the UI portion of a Laravel project ( frontend scaffolding typically provided with previous releases of Laravel ) into a separate laravel/ui package. The separate package enables the Laravel team to update, develop and version UI scaffolding package separately from the primary framework and the main Laravel codebase.</p>
<p>Step 2 - Then do this:</p>
<p><code>php artisan ui bootstrap --auth</code>      <code>php artisan migrate</code>
or</p>
<p><code>php artisan ui vue --auth</code>   <code>php artisan migrate</code>
instead of</p>
<p><code>php artisan make:auth  ( which works for Laravel 5.8 and older versions )</code></p>
<p><code>npm install &amp;&amp; npm run dev</code></p>
<p><strong>php artisan migrate错误</strong></p>
<p><code>App\Providers\AppServiceProvider.php</code></p>
<p><code>use Illuminate\Support\Facades\Schema;</code></p>
<p><code>...</code></p>
<p><code>public function boot()</code>
<code>{</code>
<code>				Schema::defaultStringLength(191);</code>
<code>}</code></p>
<h3 id="使用docker安装laravel" tabindex="-1"> 使用docker安装laravel</h3>
<p>先安装docker、docker-compose后</p>
<div><pre><code><span>curl</span> <span>-s</span> https://laravel.build/example-app <span>|</span> <span>bash</span>

<span>curl</span> <span>-s</span> <span>"https://laravel.build/example-app?with=mysql,redis"</span> <span>|</span> <span>bash</span>
<span>#如果你没有制定你想配置的服务，默认将配置 mysql，redis，meilisearch，mailhog 和 selenium</span>

<span>cd</span> example-app

<span>#编译并启动（前台）-d参数是后台启动</span>
./vendor/bin/sail up
./vendor/bin/sail up <span>-d</span>

<span>#启动</span>
./vendor/bin/sail start
<span>#停止</span>
./vendor/bin/sail stop


</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>PHP</title>
      <link>https://doflam-z.github.io/php/php.html</link>
      <guid>https://doflam-z.github.io/php/php.html</guid>
      <source url="https://doflam-z.github.io/rss.xml">PHP</source>
      <pubDate>Mon, 24 Mar 2025 02:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="php" tabindex="-1"> PHP</h1>
<h3 id="常用函数" tabindex="-1"> 常用函数</h3>
<div><pre><code>parse_str — 将字符串解析成多个变量
<span>parse_str</span><span>(</span><span>"name=Bill&amp;age=60"</span><span>,</span><span>$arr</span><span>)</span><span>;</span><span>//第一个参数为查询字符串，第二个为结果数组</span>

<span>array_filter</span><span>(</span> <span>array</span> <span>$input</span><span>[</span><span>,</span> <span>callable</span> <span>$callback</span> <span>=</span> <span>""</span><span>]</span> <span>)</span> 
<span>// 用回调函数过滤数组中的单元 依次将 input 数组中的每个值传递到 callback 函数。如果 callback 函数返回 TRUE，则 input 数组的当前值会被包含在返回的结果数组中。数组的键名保留不变，如果没有提供 callback 函数，将删除 input 中所有等值为 FALSE 的条目</span>

explode <span>//用一个字符串分割另一个字符串</span>
range <span>//建立一个指定范围的数组</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id="fpm" tabindex="-1"> fpm</h3>
<div><pre><code><span>#1、查看php-fpm的进程个数</span>
<span>ps</span> <span>-ef</span> <span>|</span><span>grep</span> <span>"php-fpm"</span><span>|</span><span>grep</span> <span>"pool"</span><span>|</span><span>wc</span> <span>-l</span>
<span>#2、查看每个php-fpm占用的内存大小</span>
<span>ps</span> <span>-ylC</span> php-fpm <span>--sort:rss</span>
<span>#3.查看PHP-FPM在你的机器上的平均内存占用</span>
<span>ps</span> --no-headers <span>-o</span> <span>"rss,cmd"</span> <span>-C</span> php-fpm <span>|</span> <span>awk</span> <span>'{ sum+=$1 } END { printf ("%d%s\n", sum/NR/1024,"M") }'</span>
<span>#4.查看单个php-fpm进程消耗内存的明细</span>
pmap <span><span>$(</span>pgrep php-fpm<span>)</span></span> <span>|</span> <span>less</span>


<span>#查看php、nginx编译参数</span>
nginx <span>-V</span>
php <span>-i</span> <span>|</span><span>grep</span> configure

<span>#grep不输出注释的行</span>
<span>grep</span> <span>"^[^#;]"</span> smb.conf

</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>重启多个php-fpm</p>
<div><pre><code><span>#php-fpm添加service服务</span>
<span>cp</span> /usr/local/src/php5.6.40/sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm

update-rc.d php-fpm defaults
 
<span># 添加</span>
update-rc.d ServiceName defaults
 
<span># 删除</span>
update-rc.d ServiceName remove

<span>#关闭php-fpm</span>
<span>pkill</span> php-fpm 或者 <span>killall</span> php-fpm

<span>#查看php-fpm配置文件路径</span>
<span>ps</span> aux <span>|</span><span>grep</span> php-fpm

<span>#查看配置文件，找到pid路径</span>
pid <span>=</span> /dev/shm/php-fpm-9001.pid

<span>#根据pid重启php-fpm</span>
<span>sudo</span> <span>kill</span> <span>-USR2</span> <span><span>`</span><span>cat</span> /dev/shm/php-fpm-9001.pid<span>`</span></span>

</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id="php多线程" tabindex="-1"> php多线程</h3>
<p>开启parallel多线程扩展 --enable-maintainer-zts</p>
<div><pre><code><span>#parallel</span>
 <span>cd</span> /usr/local/src/php7/parallel-1.1.4 <span>&amp;&amp;</span> <span>\</span>
 /web/software/php-7.4.28/bin/phpize <span>&amp;&amp;</span> <span>\</span>
 ./configure --with-php-config<span>=</span>/web/software/php-7.4.28/bin/php-config <span>&amp;&amp;</span> <span>\</span>
 <span>make</span> <span>&amp;&amp;</span> <span>make</span> <span>install</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div></div></div><p>示例：</p>
<div><pre><code><span><span>&lt;?php</span>
<span>require_once</span> <span>'baseClassV4/listen/BaseCache.php'</span><span>;</span>
<span>$redis</span> <span>=</span> <span>new</span> <span>BaseCache</span> <span>(</span><span>'redis'</span><span>,</span> <span>'default'</span><span>)</span><span>;</span>
<span>$startTime</span> <span>=</span> <span>time</span><span>(</span><span>)</span><span>;</span>
<span>$num</span> <span>=</span> <span>10</span><span>;</span>
<span>$j</span> <span>=</span> <span>0</span><span>;</span>
<span>$list</span> <span>=</span> <span>range</span><span>(</span><span>0</span><span>,</span> <span>1000</span><span>)</span><span>;</span>
<span>$path</span> <span>=</span> <span>'baseClassV4/listen/BaseCache.php'</span><span>;</span>

<span>$producer</span> <span>=</span> <span>function</span> <span>(</span><span>$parameters</span><span>)</span> <span>{</span> <span>// 线程调用回调函数体</span>
	<span>$i</span> <span>=</span> <span>0</span><span>;</span>
	<span>extract</span><span>(</span><span>$parameters</span><span>)</span><span>;</span> 
	<span>foreach</span> <span>(</span><span>$list</span> <span>as</span> <span>$item</span><span>)</span> <span>{</span>
		<span>$r</span> <span>=</span> <span>$redis</span><span>-></span><span>zIncrBy</span><span>(</span><span>'test'</span><span>,</span> <span>1</span><span>,</span> <span>$threadNum</span><span>)</span><span>;</span>
		<span>if</span> <span>(</span><span>$r</span> <span>></span> <span>0</span><span>)</span> <span>{</span>
			<span>$i</span><span>++</span><span>;</span>
		<span>}</span>
		<span>echo</span> <span>$threadNum</span> <span>.</span> <span>':'</span> <span>.</span> <span>$item</span> <span>.</span> <span>PHP_EOL</span><span>;</span>
		<span>usleep</span><span>(</span><span>10000</span><span>)</span><span>;</span>
	<span>}</span>
	<span>return</span> <span>$i</span><span>;</span>
<span>}</span><span>;</span>

<span>function</span> <span>start_threads</span><span>(</span><span>$list</span><span>,</span> <span>$producer</span><span>,</span> <span>$threadNum</span> <span>=</span> <span>1</span><span>,</span> <span>$parameters</span> <span>=</span> <span>[</span><span>]</span><span>,</span> <span>$path</span> <span>=</span> <span>''</span><span>,</span> <span>$sleep</span> <span>=</span> <span>1</span><span>)</span>
<span>{</span>
	<span>$list</span> <span>=</span> <span>array_chunk</span><span>(</span><span>$list</span><span>,</span> <span>count</span><span>(</span><span>$list</span><span>)</span> <span>/</span> <span>$threadNum</span><span>)</span><span>;</span>
	<span>foreach</span> <span>(</span><span>$list</span> <span>as</span> <span>$key</span> <span>=></span> <span>$item</span><span>)</span> <span>{</span>
		<span>$parameters</span><span>[</span><span>'list'</span><span>]</span> <span>=</span> <span>$item</span><span>;</span>
		<span>$parameters</span><span>[</span><span>'threadNum'</span><span>]</span> <span>=</span> <span>$key</span><span>;</span>
		<span>$threads</span><span>[</span><span>$key</span><span>]</span> <span>=</span> <span>(</span><span>new</span> <span><span>\</span>parallel<span>\</span>Runtime</span><span>(</span><span>$path</span><span>)</span><span>)</span><span>-></span><span>run</span><span>(</span><span>$producer</span><span>,</span> <span>[</span><span>$parameters</span><span>]</span><span>)</span><span>;</span>
	<span>}</span>

	<span>while</span> <span>(</span><span>!</span><span>empty</span><span>(</span><span>$threads</span><span>)</span><span>)</span> <span>{</span>
		<span>foreach</span> <span>(</span><span>$threads</span> <span>as</span> <span>$key</span> <span>=></span> <span>&amp;</span><span>$thread</span><span>)</span> <span>{</span>
			<span>if</span> <span>(</span><span>$thread</span><span>-></span><span>done</span><span>(</span><span>)</span><span>)</span> <span>{</span> <span>// 检测线程状态，返回true时线程运行完毕</span>
				<span>$result</span> <span>=</span> <span>$thread</span><span>-></span><span>value</span><span>(</span><span>)</span><span>;</span> <span>// 获取线程内函数执行返回的结果</span>
				<span>echo</span> <span>"ThreadId: <span><span>$key</span></span> => result: <span><span>{</span><span>$result</span><span>}</span></span> (End)\n"</span><span>;</span>
				<span>unset</span><span>(</span><span>$threads</span><span>[</span><span>$key</span><span>]</span><span>)</span><span>;</span>
			<span>}</span>
		<span>}</span>
		<span>sleep</span><span>(</span><span>$sleep</span><span>)</span><span>;</span>
	<span>}</span>
<span>}</span>


<span>start_threads</span><span>(</span><span>$list</span><span>,</span> <span>$producer</span><span>,</span> <span>10</span><span>,</span> <span>[</span><span>'redis'</span> <span>=></span> <span>$redis</span><span>]</span><span>,</span> <span>$path</span><span>,</span> <span>1</span><span>)</span><span>;</span>
</span></code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>tp6笔记</title>
      <link>https://doflam-z.github.io/php/tp6.html</link>
      <guid>https://doflam-z.github.io/php/tp6.html</guid>
      <source url="https://doflam-z.github.io/rss.xml">tp6笔记</source>
      <pubDate>Mon, 24 Mar 2025 02:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="tp6笔记" tabindex="-1"> tp6笔记</h1>
<h3 id="安装" tabindex="-1"> 安装</h3>
<p>先安装composer</p>
<div><pre><code><span>curl</span> <span>-sS</span> https://getcomposer.org/installer <span>|</span> php
<span>mv</span> composer.phar /usr/local/bin/composer
</code></pre><div aria-hidden="true"><div></div><div></div></div></div><p>安装项目</p>
<div><pre><code><span>composer</span> create-project topthink/think tp
</code></pre><div aria-hidden="true"><div></div></div></div><p>测试运行</p>
<div><pre><code>php think run
</code></pre><div aria-hidden="true"><div></div></div></div><p>安装扩展</p>
<div><pre><code><span>composer</span> require topthink/think-migration
</code></pre><div aria-hidden="true"><div></div></div></div><p>创建文件</p>
<div><pre><code>php think migrate:create ArticleTable
</code></pre><div aria-hidden="true"><div></div></div></div><p>进入database目录修改代码</p>
<div><pre><code>public <span>function</span> <span>change</span><span>(</span><span>)</span>
<span>{</span>
    // create the table
    <span>$table</span>  <span>=</span>  <span>$this</span>-<span>></span>table<span>(</span><span>'article'</span><span>)</span><span>;</span>
    <span>$table</span>-<span>></span>addColumn<span>(</span><span>'title'</span>, <span>'string'</span>, <span>[</span><span>'comment'</span> <span>=</span><span>></span> <span>'文章标题'</span><span>]</span><span>)</span>
    -<span>></span>addColumn<span>(</span><span>'body'</span>, <span>'text'</span>, <span>[</span><span>'comment'</span> <span>=</span><span>></span> <span>'文章内容'</span><span>]</span><span>)</span>
    -<span>></span>addTimestamps<span>(</span><span>)</span>
    -<span>></span>create<span>(</span><span>)</span><span>;</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>运行建表</p>
<div><pre><code>php think migrate:run
</code></pre><div aria-hidden="true"><div></div></div></div><p>生成控制器、模型</p>
<div><pre><code> php think make:controller index@Demo 
 php think make:model Demo
</code></pre><div aria-hidden="true"><div></div><div></div></div></div><p>安装包</p>
<div><pre><code>composer install --ignore-platform-reqs
</code></pre><div aria-hidden="true"><div></div></div></div><h4 id="多应用" tabindex="-1"> 多应用</h4>
<p>安装多应用扩展，创建应用目录</p>
<div><pre><code><span>composer</span> require topthink/think-multi-app 
php think build adimn
</code></pre><div aria-hidden="true"><div></div><div></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>Python笔记</title>
      <link>https://doflam-z.github.io/python/Python.html</link>
      <guid>https://doflam-z.github.io/python/Python.html</guid>
      <source url="https://doflam-z.github.io/rss.xml">Python笔记</source>
      <pubDate>Mon, 24 Mar 2025 02:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="python笔记" tabindex="-1"> Python笔记</h1>
<h3 id="pip导出、安装依赖" tabindex="-1"> PIP导出、安装依赖</h3>
<div><pre><code>pip freeze <span>></span> requirements.txt
pip <span>install</span> <span>-r</span> requirements.txt
</code></pre><div aria-hidden="true"><div></div><div></div></div></div><h3 id="使用-pyenv-安装管理多个-python版本" tabindex="-1"> 使用 pyenv 安装管理多个 Python版本</h3>
<p><strong>pyenv 的作用</strong></p>
<p>pyenv 是一个 <strong>Python 版本管理工具</strong>，可以让你轻松地在同一台机器上安装和切换多个 Python 版本，而不会影响系统自带的 Python。</p>
<p><strong>💡 pyenv 能做什么？</strong></p>
<p><strong>1️⃣ 在同一台电脑上安装多个 Python 版本</strong></p>
<p>比如你的系统默认是 Python 3.8，但你想在不同项目中使用 Python 3.10 或 3.12，就可以用 pyenv 轻松管理：</p>
<div><pre><code>pyenv install 3.10.13
pyenv install 3.12.1
</code></pre><div aria-hidden="true"><div></div><div></div></div></div><p><strong>2️⃣ 让不同项目使用不同的 Python 版本</strong></p>
<p>你可以为每个项目指定不同的 Python 版本，避免兼容性问题：</p>
<div><pre><code>cd my_project
pyenv local 3.10.13  # 这个项目用 Python 3.10
</code></pre><div aria-hidden="true"><div></div><div></div></div></div><p>另一个项目可以使用 Python 3.12：</p>
<div><pre><code>cd another_project
pyenv local 3.12.1  # 这个项目用 Python 3.12
</code></pre><div aria-hidden="true"><div></div><div></div></div></div><p>这样，每个项目的 Python 版本都是独立的，不会互相干扰。</p>
<p><strong>3️⃣ 替换系统默认的 Python</strong></p>
<p>在不改动系统自带 Python 的情况下，使用自己安装的 Python 版本：</p>
<div><pre><code>pyenv global 3.12.1  # 让整个用户环境默认使用 Python 3.12.1
</code></pre><div aria-hidden="true"><div></div></div></div><p>如果想恢复系统默认的 Python：</p>
<div><pre><code>pyenv global system
</code></pre><div aria-hidden="true"><div></div></div></div><p><strong>4️⃣ 解决 sudo apt install python3-distutils 找不到的问题</strong></p>
<p>有时候 Ubuntu 官方的软件库没有提供最新的 Python 版本或者某些组件（如 distutils）。用 pyenv 安装 Python 可以绕开这个问题，比如：</p>
<div><pre><code>pyenv install 3.11.6  # 安装 Python 3.11.6
pyenv global 3.11.6  # 设为默认 Python 版本
</code></pre><div aria-hidden="true"><div></div><div></div></div></div><p>然后你就可以使用 pip 正常安装 lxml 了：</p>
<div><pre><code>pip install lxml
</code></pre><div aria-hidden="true"><div></div></div></div><hr>
<p><strong>🚀 pyenv 安装 &amp; 使用</strong></p>
<p><strong>1️⃣ 安装 pyenv</strong></p>
<p><strong>🔹 Ubuntu / Debian</strong></p>
<div><pre><code>curl https://pyenv.run | bash
</code></pre><div aria-hidden="true"><div></div></div></div><p>然后添加以下内容到 ~/.bashrc 或 ~/.bash_profile：</p>
<div><pre><code>export PATH="$HOME/.pyenv/bin:$PATH"
eval "$(pyenv init --path)"
eval "$(pyenv virtualenv-init -)"
</code></pre><div aria-hidden="true"><div></div><div></div><div></div></div></div><p>然后运行：</p>
<div><pre><code>exec $SHELL  # 重新加载 shell
</code></pre><div aria-hidden="true"><div></div></div></div><p><strong>🔹 Mac（使用 Homebrew 安装）</strong></p>
<div><pre><code>brew install pyenv
echo 'eval "$(pyenv init --path)"' >> ~/.zshrc
source ~/.zshrc
</code></pre><div aria-hidden="true"><div></div><div></div><div></div></div></div><p><strong>2️⃣ 使用 pyenv 安装 Python</strong></p>
<div><pre><code>pyenv install 3.12.1
pyenv global 3.12.1
python --version  # 确保使用的是 pyenv 版本
</code></pre><div aria-hidden="true"><div></div><div></div><div></div></div></div><p><strong>🛠️ 总结</strong></p>
<p>🔹 <strong>pyenv = Python 版本管理器</strong>，让你可以安装、切换多个 Python 版本。</p>
<p>🔹 <strong>避免破坏系统 Python</strong>，不会影响 apt 或 yum 管理的 Python。</p>
<p>🔹 <strong>解决依赖问题</strong>，如 distutils 缺失、pip 版本冲突等。</p>
<p>🔹 <strong>每个项目可以有自己的 Python 版本</strong>，避免不同 Python 版本的兼容性问题。</p>
<h3 id="python-编译缺失了多个重要模块" tabindex="-1"> Python 编译缺失了多个重要模块</h3>
<blockquote>
<p>Python 编译缺失了多个重要模块，包括 _curses（ncurses）、readline（GNU Readline）、_sqlite3（SQLite3）和 _lzma（LZMA）。这些问题通常是因为缺少必要的 系统依赖，所以你需要安装它们后重新编译 Python。</p>
</blockquote>
<p>解决方案</p>
<ol>
<li>安装缺失的系统依赖</li>
</ol>
<p>在 Ubuntu/Debian 上运行：</p>
<div><pre><code><span>sudo</span> <span>apt</span> update <span>&amp;&amp;</span> <span>sudo</span> <span>apt</span> <span>install</span> <span>-y</span> <span>\</span>
    libbz2-dev <span>\</span>
    liblzma-dev <span>\</span>
    libsqlite3-dev <span>\</span>
    libncurses5-dev <span>\</span>
    libncursesw5-dev <span>\</span>
    libreadline-dev <span>\</span>
    xz-utils <span>\</span>
    tk-dev
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>在 CentOS/RHEL 上：</p>
<div><pre><code><span>sudo</span> yum <span>install</span> <span>-y</span> <span>\</span>
    bzip2-devel <span>\</span>
    xz-devel <span>\</span>
    sqlite-devel <span>\</span>
    ncurses-devel <span>\</span>
    readline-devel <span>\</span>
    xz <span>\</span>
    tk-devel
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><ol start="2">
<li>强制重新编译 Python</li>
</ol>
<p>安装完依赖后，重新编译 Python：</p>
<div><pre><code><span>CFLAGS</span><span>=</span><span>"-I/usr/include -I/usr/include/bz2 -I/usr/include/lzma -I/usr/include/ncurses -I/usr/include/readline -I/usr/include/sqlite3"</span> <span>\</span>
pyenv <span>install</span> <span>3.9</span>.7 <span>--force</span>
</code></pre><div aria-hidden="true"><div></div><div></div></div></div><ol start="3">
<li>激活 Python 并检查模块</li>
</ol>
<p>安装完成后，检查 Python 是否正确编译了所有模块：</p>
<div><pre><code>pyenv <span>local</span> <span>3.9</span>.7

python3 <span>-c</span> <span>"import bz2, lzma, sqlite3, readline, curses"</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div></div></div><p>如果没有报错，说明一切正常！</p>
<h3 id="安装virtualenv虚拟环境" tabindex="-1"> 安装virtualenv虚拟环境</h3>
<p>安装virtualenv</p>
<div><pre><code>pip3 <span>install</span> virtualenv
</code></pre><div aria-hidden="true"><div></div></div></div><p>创建项目目录app同时创建一个名为venv的虚拟环境，进入环境</p>
<div><pre><code><span>#mac</span>
pip <span>install</span> virtualenv
python3 <span>-m</span> venv venv
<span>source</span> venv/bin/activate

<span>#win</span>
<span>#打开命令行输入 Set-ExecutionPolicy RemoteSigned</span>
pip <span>install</span> virtualenv
pip <span>install</span> virtualenvwrapper
<span>cd</span> app
virtualenv venv
<span>#进入虚拟环境</span>
.<span>\</span>venv<span>\</span>Scripts<span>\</span>activate
<span>#离开虚拟环境</span>
.<span>\</span>venv<span>\</span>Scripts<span>\</span>deactivate
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>退出虚拟环境</p>
<div><pre><code>deactivate
</code></pre><div aria-hidden="true"><div></div></div></div><h3 id="安装scrapy" tabindex="-1"> 安装Scrapy</h3>
<div><pre><code><span>#先安装依赖</span>
pip <span>install</span> wheel lxml pyOpenSSL Twisted
pip <span>install</span> <span>install</span> Scrapy

<span># 或者直接导入依赖文本</span>
pip <span>install</span> <span>-r</span> requirements.txt

<span>#创建项目</span>
scrapy startproject tutorial

<span>#创建第一个爬虫文件，指定域名</span>
scrapy genspider zhipin <span>"zhipin.com"</span>

<span>#创建一个XMLFeedSpider爬虫文件</span>
scrapy genspider <span>-t</span> xmlfeed lagou lagou.com

<span>#运行一个爬虫程序，输出到文件</span>
scrapy crawl mininova <span>-o</span> scraped_data.json 

<span>#运行一个爬虫程序，将日志输出到指定目录</span>
scrpay crawl spider_name  <span>-s</span> <span>LOG_FILE</span><span>=</span>all.log

<span>#配置文件settings.py</span>
<span>#开启下载器中间件，数值越小越接近控制器</span>
DOWNLOADER_MIDDLEWARES <span>=</span> <span>{</span>
    <span>'companyProfile.middlewares.CompanyprofileDownloaderMiddleware'</span><span>:</span> None,
    <span>'companyProfile.middlewares.AgentDownloaderMiddleware'</span><span>:</span> <span>543</span>,
    <span>'companyProfile.middlewares.SeleniumDownloaderMiddleware'</span><span>:</span> <span>643</span>,
<span>}</span>

<span>#开启管道</span>
ITEM_PIPELINES <span>=</span> <span>{</span>
   <span>'companyProfile.pipelines.CompanyprofilePipeline'</span><span>:</span> <span>300</span>,
<span>}</span>


</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id="selenium需要chrome驱动" tabindex="-1"> selenium需要chrome驱动</h3>
<div><pre><code><span># 安装chrome</span>
<span>sudo</span> <span>wget</span> https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
<span>sudo</span> <span>apt</span> <span>install</span> ./google-chrome-stable_current_amd64.deb
<span># 下载驱动</span>
<span>sudo</span> <span>wget</span> https://chromedriver.storage.googleapis.com/101.0.4951.41/chromedriver_linux64.zip
<span># 解压直接使用</span>
<span>sudo</span> <span>unzip</span> chromedriver_linux64.zip
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id="安装爬虫需要的库" tabindex="-1"> 安装爬虫需要的库</h3>
<div><pre><code> pip <span>install</span> beautifulsoup4 
 pip <span>install</span> requests
 pip <span>install</span> selenium
 pip <span>install</span> fake-useragent
 pip <span>install</span> redis
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div></div></div><h3 id="安装mysql-peewee-orm库" tabindex="-1"> 安装mysql peewee ORM库</h3>
<div><pre><code>pip <span>install</span> pymysql
pip <span>install</span> peewee
</code></pre><div aria-hidden="true"><div></div><div></div></div></div><h5 id="peewee生成module文件" tabindex="-1"> peewee生成module文件</h5>
<div><pre><code>python <span>-m</span> pwiz <span>-e</span> mysql <span>-H</span> localhost <span>-p</span> <span>3306</span> <span>-u</span> 数据库用户名 <span>-P</span> 数据库密码 <span>-t</span> 表名<span>(</span>table name<span>)</span> 库名<span>(</span>database name<span>)</span> <span>></span> 要生成的python文件名称.py
python <span>-m</span> pwiz <span>-e</span> mysql <span>-H</span> <span>192.168</span>.1.14 <span>-p</span> <span>3306</span> <span>-u</span> jobSnatch_r <span>-P</span> <span>-t</span> tb_company_info jobui_snatch_company <span>></span> tb_company_info.py

python <span>-m</span> pwiz <span>-e</span> mysql <span>-H</span> <span>192.168</span>.1.14 <span>-p</span> <span>3306</span> <span>-u</span> jobSnatch_r <span>-P</span> <span>-t</span> tb_company_content jobui_snatch_company <span>></span> tb_company_info.py

python <span>-m</span> pwiz <span>-e</span> mysql <span>-H</span> <span>121.9</span>.201.145 <span>-p</span> <span>3307</span> <span>-u</span> jobSnatch_w <span>-P</span> <span>-t</span> tb_company_status jobui_snatch_company <span>></span> tb_company_status.py
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>生成的文件需要转成utf-8文件格式</p>
<div><pre><code>database = MySQLDatabase('jobui_snatch_company', host="192.168.1.14", user='jobSnatch_r', passwd='j89#do@k', port=3306)
</code></pre><div aria-hidden="true"><div></div></div></div><div><pre><code>database = MySQLDatabase('jobui_snatch_company', host="192.168.1.14", user='jobSnatch_r', passwd='j89#do@k', port=3306)
</code></pre><div aria-hidden="true"><div></div></div></div><h3 id="安装mongodb-orm库" tabindex="-1"> 安装mongodb ORM库</h3>
<div><pre><code><span>#安装pymongo3.12.3，最新版本验证会报错</span>
pip install  pymongo<span>==</span><span>3.12</span><span>.3</span>
<span>#安装MongoEngine</span>
python <span>-</span>m pip install mongoengine

<span>#连接</span>
<span>from</span> mongoengine <span>import</span> <span>*</span>
<span>from</span> env <span>import</span> <span>*</span>

db <span>=</span> <span>'jobui_tmp'</span>
config <span>=</span> Env<span>.</span>get_db_config<span>(</span>db<span>)</span>
connect<span>(</span>db<span>,</span> <span>**</span>config<span>)</span>


<span>class</span> <span>CompanyProfile</span><span>(</span>Document<span>)</span><span>:</span>
    _id <span>=</span> IntField<span>(</span>primary_key<span>=</span><span>True</span><span>)</span>  <span># 公司id</span>
    name <span>=</span> StringField<span>(</span><span>)</span>  <span># 公司名</span>
    domain <span>=</span> StringField<span>(</span><span>)</span>  <span># 来源网址</span>
    content <span>=</span> StringField<span>(</span><span>)</span>  <span># 公司介绍</span>

    meta <span>=</span> <span>{</span>
        <span>'indexes'</span><span>:</span> <span>[</span>  <span># 建索引</span>
            <span>'name'</span><span>,</span>
            <span>'domain'</span><span>,</span>
            <span>'content'</span>
        <span>]</span>
    <span>}</span>

<span>##如果有主键字段，则主键字段不能设置为AutoField类型，会导致插入语句异常</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>shell</title>
      <link>https://doflam-z.github.io/linux/shell.html</link>
      <guid>https://doflam-z.github.io/linux/shell.html</guid>
      <source url="https://doflam-z.github.io/rss.xml">shell</source>
      <pubDate>Fri, 21 Mar 2025 02:03:08 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="shell" tabindex="-1"> shell</h1>
<h3 id="查看系统当前使用的shell、查看系统有哪些shell" tabindex="-1"> 查看系统当前使用的shell、查看系统有哪些shell</h3>
<div><pre><code><span>echo</span> <span>$SHELL</span>
<span>cat</span> /etc/shells
</code></pre><div aria-hidden="true"><div></div><div></div></div></div><h3 id="安装zsh" tabindex="-1"> 安装zsh</h3>
<div><pre><code><span>sudo</span> <span>apt</span> <span>install</span> <span>zsh</span> <span>-y</span>
</code></pre><div aria-hidden="true"><div></div></div></div><blockquote>
<p>设置为默认shell</p>
</blockquote>
<div><pre><code>chsh <span>-s</span> /bin/zsh
</code></pre><div aria-hidden="true"><div></div></div></div><h3 id="安装oh-my-zsh" tabindex="-1"> 安装oh my zsh</h3>
<div><pre><code><span>sh</span> <span>-c</span> <span>"<span><span>$(</span><span>curl</span> <span>-fsSL</span> https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh<span>)</span></span>"</span>
</code></pre><div aria-hidden="true"><div></div></div></div><h3 id="配置主题" tabindex="-1"> 配置主题</h3>
<blockquote>
<p>将 <code>ZSH_THEME=&quot;robbyrussell&quot;</code> 修改为 <code>ZSH_THEME=&quot;ys&quot;</code> ，ys这个主题比较简约,修改之后重新加载配置文件 <code>source ~/.zshrc</code>主题链接https://github.com/ohmyzsh/ohmyzsh/wiki/Themes</p>
</blockquote>
<p>安装 <strong>Oh My Zsh</strong>（推荐）</p>
<div><pre><code>sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
</code></pre><div aria-hidden="true"><div></div></div></div><p>下载 Powerlevel10k 主题：</p>
<div><pre><code>git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k
</code></pre><div aria-hidden="true"><div></div></div></div><p>编辑 ~/.zshrc 文件：</p>
<div><pre><code>ZSH_THEME="powerlevel10k/powerlevel10k"
</code></pre><div aria-hidden="true"><div></div></div></div><p>重新加载配置：</p>
<div><pre><code>source ~/.zshrc
</code></pre><div aria-hidden="true"><div></div></div></div><h3 id="安装插件" tabindex="-1"> 安装插件</h3>
<blockquote>
<p>安装命令补全、命令高亮显示插件</p>
</blockquote>
<p>下载</p>
<div><pre><code><span>git</span> clone https://github.com/zsh-users/zsh-autosuggestions <span>${ZSH_CUSTOM<span>:-</span>$HOME<span>/</span>.oh-my-zsh<span>/</span>custom}</span>/plugins/zsh-autosuggestions

<span>git</span> clone https://github.com/zsh-users/zsh-syntax-highlighting <span>${ZSH_CUSTOM<span>:-</span>~<span>/</span>.oh-my-zsh<span>/</span>custom}</span>/plugins/zsh-syntax-highlighting
</code></pre><div aria-hidden="true"><div></div><div></div><div></div></div></div><p>开启</p>
<div><pre><code><span>vi</span> ~/.zshrc
<span># 开启插件</span>
<span>plugins</span><span>=</span><span>(</span>git z zsh-syntax-highlighting zsh-autosuggestions<span>)</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>network</title>
      <link>https://doflam-z.github.io/linux/network.html</link>
      <guid>https://doflam-z.github.io/linux/network.html</guid>
      <source url="https://doflam-z.github.io/rss.xml">network</source>
      <pubDate>Mon, 26 Feb 2024 10:08:55 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="network" tabindex="-1"> network</h1>
<blockquote>
<p>网络相关命令</p>
</blockquote>
<h3 id="查看网络实时流量" tabindex="-1"> 查看网络实时流量</h3>
<div><pre><code><span>sudo</span> iftop <span>-i</span> eno3
</code></pre><div aria-hidden="true"><div></div></div></div><blockquote>
<p>-i 指定网卡</p>
</blockquote>
<h3 id="查看tcp、udp连接数" tabindex="-1"> 查看tcp、udp连接数</h3>
<div><pre><code><span>sudo</span> <span>netstat</span> <span>-an</span> <span>|</span> <span>grep</span> tcp <span>|</span> <span>wc</span> <span>-l</span>
<span>sudo</span> <span>netstat</span> <span>-anu</span> <span>|</span> <span>grep</span> udp <span>|</span> <span>wc</span> <span>-l</span>
</code></pre><div aria-hidden="true"><div></div><div></div></div></div><blockquote>
<p>这个命令的含义是：</p>
<ul>
<li><code>netstat -an</code>：列出系统上的所有网络连接，包括 TCP 和 UDP 连接。</li>
<li><code>grep tcp</code>：筛选出 TCP 连接的行。</li>
<li><code>wc -l</code>：对筛选后的行数进行统计，即计算 TCP 连接的数量</li>
</ul>
</blockquote>
<h3 id="查看tcp错误数" tabindex="-1"> 查看tcp错误数</h3>
<div><pre><code><span>sudo</span> <span>netstat</span> <span>-s</span> <span>|</span> <span>grep</span> <span>-i</span> error
</code></pre><div aria-hidden="true"><div></div></div></div><h3 id="抓包到指定端口的数据包" tabindex="-1"> 抓包到指定端口的数据包</h3>
<div><pre><code><span>sudo</span> tcpdump <span>-i</span> eno3 <span>-nn</span> <span>-vvv</span> <span>'host 192.168.2.134 and port 12000'</span>
</code></pre><div aria-hidden="true"><div></div></div></div><blockquote>
<p>这个命令的含义是：</p>
<ul>
<li><code>-i &lt;interface&gt;</code>：指定监视的网络接口。</li>
<li><code>-nn</code>：禁用域名解析，显示IP地址而不是主机名。</li>
<li><code>-vvv</code>：增加详细级别，显示更多的信息。</li>
<li><code>'host &lt;host_ip&gt; and port &lt;port&gt;'</code>：过滤出指定主机和端口的流量</li>
</ul>
</blockquote>
]]></content:encoded>
    </item>
    <item>
      <title>防火墙</title>
      <link>https://doflam-z.github.io/linux/%E9%98%B2%E7%81%AB%E5%A2%99.html</link>
      <guid>https://doflam-z.github.io/linux/%E9%98%B2%E7%81%AB%E5%A2%99.html</guid>
      <source url="https://doflam-z.github.io/rss.xml">防火墙</source>
      <pubDate>Mon, 26 Feb 2024 10:08:55 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="防火墙" tabindex="-1"> 防火墙</h1>
<h3 id="firewalld" tabindex="-1"> Firewalld</h3>
<blockquote>
<p>firewalld默认是关闭所有端口</p>
</blockquote>
<p>开启firewalld防火墙</p>
<div><pre><code>systemctl start firewalld.service       <span>#停止firewall</span>
systemctl <span>enable</span> firewalld.service     <span>#禁止firewall开机启动</span>
</code></pre><div aria-hidden="true"><div></div><div></div></div></div><p>开启端口</p>
<div><pre><code><span>#直接开放端口</span>
firewall-cmd <span>--zone</span><span>=</span>public --add-port<span>=</span><span>80</span>/tcp <span>--permanent</span>

<span>#开放指定ip段访问指定端口</span>
<span>sudo</span> firewall-cmd <span>--permanent</span> --add-rich-rule<span>=</span><span>'rule family=ipv4 source address=192.168.2.0/24 port protocol=tcp port=60011 accept'</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div></div></div><blockquote>
<p>命令含义：</p>
<p>--zone #作用域</p>
<p>--add-port=80/tcp #添加端口，格式为：端口/通讯协议</p>
<p>--permanent #永久生效，没有此参数重启后失效</p>
</blockquote>
<p>重启防火墙</p>
<div><pre><code>firewall-cmd <span>--reload</span> 
</code></pre><div aria-hidden="true"><div></div></div></div><p>常用命令介绍</p>
<div><pre><code>firewall-cmd <span>--state</span>              <span>##查看防火墙状态，是否是running</span>

firewall-cmd <span>--reload</span>              <span>##重新载入配置，比如添加规则之后，需要执行此命令</span>

firewall-cmd --get-zones            <span>##列出支持的zone</span>

firewall-cmd --get-services           <span>##列出支持的服务，在列表中的服务是放行的</span>

firewall-cmd --query-service <span>ftp</span>        <span>##查看ftp服务是否支持，返回yes或者no</span>

firewall-cmd --add-service<span>=</span>ftp         <span>##临时开放ftp服务</span>

firewall-cmd --add-service<span>=</span>ftp <span>--permanent</span>   <span>##永久开放ftp服务</span>

firewall-cmd --remove-service<span>=</span>ftp <span>--permanent</span>  <span>##永久移除ftp服务</span>

firewall-cmd --add-port<span>=</span><span>80</span>/tcp <span>--permanent</span>   <span>##永久添加80端口 </span>

iptables <span>-L</span> <span>-n</span>                 <span>##查看规则，这个命令是和iptables的相同的</span>

<span>man</span> firewall-cmd                <span>##查看帮助</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id="iptables" tabindex="-1"> Iptables</h3>
<blockquote>
<p>CentOS 7.0默认使用的是firewall作为防火墙，使用iptables必须重新设置一下</p>
</blockquote>
<h3 id="常用规则" tabindex="-1"> 常用规则</h3>
<p>先拒绝所有，再开放一个端口给指定ip或者地址段</p>
<div><pre><code><span>sudo</span> iptables <span>-P</span> INPUT DROP <span># 这个规则执行后，现有规则不会失效，但其行为会受到默认策略的影响。这是因为默认策略是所有未匹配到现有规则的流量的最终处理方式。</span>
<span>sudo</span> iptables <span>-I</span> INPUT <span>-s</span> <span>14.23</span>.97.250/192.168.2.0/24 <span>-p</span> tcp <span>--dport</span> <span>60011</span> <span>-j</span> ACCEPT
</code></pre><div aria-hidden="true"><div></div><div></div></div></div><p>保存规则、恢复规则</p>
<div><pre><code><span>sudo</span> iptables-save <span>></span> /etc/iptables/rules.v4
<span>sudo</span> iptables-restore <span>&lt;</span> /etc/iptables/rules.v4
</code></pre><div aria-hidden="true"><div></div><div></div></div></div><p>1、直接关闭firewalld防火墙</p>
<div><pre><code>systemctl stop firewalld.service      <span>#停止firewall</span>
systemctl disable firewalld.service   <span>#禁止firewall开机启动</span>
</code></pre><div aria-hidden="true"><div></div><div></div></div></div><p>2、设置 iptables service</p>
<p>yum -y install iptables-services</p>
<p>如果要修改防火墙配置，如增加防火墙端口3306</p>
<p>vi /etc/sysconfig/iptables</p>
<p>增加规则</p>
<p>-A INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT</p>
<p>保存退出后</p>
<p>systemctl restart iptables.service #重启防火墙使配置生效</p>
<p>systemctl enable iptables.service #设置防火墙开机启动</p>
<p>最后重启系统使设置生效即可。</p>
<p><strong>查看</strong> <strong>SELinux<strong><strong>状态及关闭</strong></strong>SELinux</strong></p>
<p>查看SELinux状态：</p>
<p>1、/usr/sbin/sestatus -v   ##如果SELinux status参数为enabled即为开启状态</p>
<p>SELinux status:         enabled</p>
<p>2、getenforce         ##也可以用这个命令检查</p>
<p>关闭SELinux：</p>
<p>1、临时关闭（不用重启机器）：</p>
<p>setenforce 0         ##设置SELinux 成为permissive模式</p>
<p>​               ##setenforce 1 设置SELinux 成为enforcing模式</p>
<p>2、修改配置文件需要重启机器：</p>
<p>修改/etc/selinux/config 文件</p>
<p>将SELINUX=enforcing改为SELINUX=disabled</p>
<p>重启机器即可</p>
<p><strong>iptables****配置</strong></p>
<p>查看iptables配置：iptables -L -n</p>
<p>添加常用端口规则：</p>
<p>#允许对外请求的返回包</p>
<p>iptables -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT</p>
<p>#允许icmp包通过</p>
<p>iptables -A INPUT -p icmp --icmp-type any -j ACCEPT</p>
<p>#允许来自于lo接口的数据包，如果没有此规则，将不能通过127.0.0.1访问本地服务</p>
<p>iptables -A INPUT -i lo -j ACCEPT</p>
<p>#禁止一个ip段</p>
<p>iptables -I INPUT -s 114.64.244.0/24 -j DROP</p>
<p>#常用端口</p>
<p>iptables -A INPUT -p tcp -m state --state NEW -m tcp --dport 21 -j ACCEPT</p>
<p>iptables -A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT</p>
<p>iptables -A INPUT -p tcp -m state --state NEW -m tcp --dport 23 -j ACCEPT</p>
<p>iptables -A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT</p>
<p>iptables -A INPUT -p tcp -m state --state NEW -m tcp --dport 443 -j ACCEPT</p>
<p>iptables -A INPUT -p tcp -m state --state NEW -m tcp --dport 3306 -j ACCEPT</p>
<p>iptables -A INPUT -p tcp -m state --state NEW -m tcp --dport 8080 -j ACCEPT</p>
<p>#过滤所有非以上规则的请求</p>
<p>iptables -P INPUT DROP</p>
<p>#如果要添加内网ip信任（接受其所有TCP请求）</p>
<p>#注：(<strong>.</strong>.<strong>.</strong>)为IP,下同</p>
<p>iptables -A INPUT -p tcp -s <strong>.</strong>.<strong>.</strong> -j ACCEPT</p>
<p>#要封停一个IP，使用下面这条命令</p>
<p>iptables -I INPUT -s <strong>.</strong>.<strong>.</strong> -j DROP</p>
<p>#要解封一个IP，使用下面这条命令</p>
<p>iptables -D INPUT -s <strong>.</strong>.<strong>.</strong> -j DROP</p>
<p>保存重启防火墙</p>
<p>/etc/init.d/iptables save</p>
<p>service iptables restart</p>
<p>其他常用命令（不是一定要做）</p>
<p>#允许所有入栈规则</p>
<p>iptables -P INPUT ACCEPT</p>
<p>#清空默认所有规则</p>
<p>iptables -F</p>
<p>#清空自定义的所有规则</p>
<p>iptables -X</p>
<p>#计数器置0</p>
<p>iptables -Z</p>
<p>关闭端口</p>
<p>常用删除端口规则</p>
<p># 查看当前端口所在行数</p>
<p>iptables -L -n --line-number</p>
<p># 删除指定序列的端口（下面是删除第五条端口）</p>
<p>iptables -D INPUT 5</p>
<p># 确认是否已经删除，可以重新查看列表</p>
<p>iptables -L -n --line-number</p>
<h2 id="debian" tabindex="-1"> debian</h2>
<blockquote>
<p>debian管理iptables需要用到iptables-persistent ，或者ufw</p>
<p>通过iptables-persistent生成的规则默认将被存储在以下文件中</p>
<p>/etc/iptables/rules.v4    /etc/iptables/rules.v6</p>
</blockquote>
<h3 id="安装iptables-persistent来使用iptables命令" tabindex="-1"> 安装iptables-persistent来使用iptables命令</h3>
<div><pre><code><span>sudo</span> <span>apt</span> <span>install</span> iptables-persistent <span>-y</span>
<span># 保存重载</span>
<span>sudo</span> netfilter-persistent save
<span>sudo</span> netfilter-persistent reload
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div></div></div><h3 id="或者安装使用-ufw-来设置防火墙" tabindex="-1"> 或者安装使用 UFW 来设置防火墙</h3>
<p>安装</p>
<div><pre><code><span>sudo</span> <span>apt</span> update
<span>sudo</span> <span>apt</span> <span>install</span> ufw

<span>#检查状态，默认是关闭</span>
<span>sudo</span> ufw status verbose
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div></div></div><p>UFW默认策略是关闭所有进来的连接，开启所有出去的连接，文件路径在：</p>
<blockquote>
<p>/etc/default/ufw</p>
</blockquote>
<p>允许一个端口</p>
<div><pre><code><span>sudo</span> ufw allow <span>7722</span>/tcp
</code></pre><div aria-hidden="true"><div></div></div></div><p>打开一段端口</p>
<div><pre><code><span>sudo</span> ufw allow <span>7100</span>:7200/tcp
<span>sudo</span> ufw allow <span>7100</span>:7200/udp
</code></pre><div aria-hidden="true"><div></div><div></div></div></div><p>允许指定ip访问所有端口</p>
<div><pre><code><span>sudo</span> ufw allow from <span>10.10</span>.10.10
</code></pre><div aria-hidden="true"><div></div></div></div><p>允许指定ip访问指定端口</p>
<div><pre><code><span>sudo</span> ufw allow from <span>64.63</span>.62.61 to any port <span>22</span>

<span>sudo</span> ufw allow from <span>120.232</span>.65.223 to any port <span>5574,8080</span>,80,9080,443
<span>sudo</span> ufw allow from <span>157.148</span>.45.20 to any port <span>5574,8080</span>,80,9080,443
<span>sudo</span> ufw allow from <span>183.2</span>.143.163 to any port <span>5574,8080</span>,80,9080,443/tcp
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div></div></div><p>允许整个网段</p>
<div><pre><code><span>sudo</span> ufw allow from <span>192.168</span>.1.0/24 to any port <span>3306</span>
</code></pre><div aria-hidden="true"><div></div></div></div><p>禁止连接</p>
<div><pre><code><span>sudo</span> ufw deny from <span>23.24</span>.25.0/24 to any port <span>80</span>
<span>sudo</span> ufw deny from <span>23.24</span>.25.0/24 to any port <span>443</span>
</code></pre><div aria-hidden="true"><div></div><div></div></div></div><p>查看规则</p>
<div><pre><code><span>sudo</span> ufw status numbered
</code></pre><div aria-hidden="true"><div></div></div></div><p>删除规则</p>
<div><pre><code><span>sudo</span> ufw delete <span>3</span>
</code></pre><div aria-hidden="true"><div></div></div></div><p>启动、关闭、重置</p>
<div><pre><code><span>sudo</span> ufw <span>enable</span>
<span>sudo</span> ufw disable
<span>sudo</span> ufw reset
</code></pre><div aria-hidden="true"><div></div><div></div><div></div></div></div><h3 id="更换默认ssh端口" tabindex="-1"> 更换默认ssh端口</h3>
<div><pre><code><span>#1.开启一个ssh端口</span>

<span>vi</span> /etc/ssh/sshd_config

<span>#把#Port 22</span>
<span>#修改为</span>

Port <span>22</span>
Port <span>2222</span>

<span>service</span> sshd restart

<span>#防火墙开启2222端口（如果开启了selinux，记得一定要关闭）</span>

<span>#去测试一下2222端口是否开启，这点很重要</span>

<span>#2.设置方法一：只允许192.168.5.231访问</span>

<span>#运行完下面这一行，你已经不能访问了，改用2222去设置下面一行</span>
iptables <span>-I</span> INPUT <span>-p</span> tcp <span>--dport</span> <span>22</span> <span>-j</span> DROP

<span>#用2222端口去运行下面一行，运行完，22端口就可以使用</span>
iptables <span>-I</span> INPUT <span>-s</span> x.x.x.x <span>-p</span> tcp <span>--dport</span> <span>22</span> <span>-j</span> ACCEPT

<span>#保存</span>
<span>service</span> iptables save

<span>#重启</span>
<span>service</span> iptables restart
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id="iptables配置脚本" tabindex="-1"> iptables配置脚本</h3>
<div><pre><code>#!/bin/sh

# 先备份iptables规则
mkdir /web/shell/iptables_bak
cp /etc/sysconfig/iptables /web/shell/iptables_bak/iptables

# 设置之前关闭防火墙才是最安全的办法，否则会发生连接不上的问题
service iptables stop

# 禁止所有ip访问22端口
iptables -I INPUT -p tcp --dport 22 -j DROP

# 开放指定ip可以连接22端口
iptables -A INPUT -i 127.0.0.1 -p tcp --dport 22 -j ACCEPT
iptables -I INPUT -s x.x.x.x,192.168.2.0/24 -p tcp --dport 22 -j ACCEPT

# 允许部分出去的网络  			
iptables -A OUTPUT -d 192.168.2.0/24,x.x.x.x,121.201.88.88,114.114.114.114 -j ACCEPT    
   
# 允许访问的外网
iptables -A OUTPUT -d open.work.weixin.qq.com,v0.api.upyun.com,v1.api.upyun.com,v2.api.upyun.com,v3.api.upyun.com,graph.qq.com,apis.map.qq.com,api.weixin.qq.com,login.weixin.qq.com,wx.qq.com,api.weibo.com,js4.jobui.com,css4.jobui.com,m.jobui.com,www.jobui.com,apis.jobui.com -j ACCEPT


#允许icmp包通过,也就是允许ping
iptables -A INPUT -p icmp -m icmp --icmp-type 8 -j ACCEPT

#本机对外请求相当于OUTPUT,对于返回数据包必须接收啊，这相当于INPUT了
iptables -I INPUT -i lo -j ACCEPT
iptables -I INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT

# 禁用所有出去的网络
iptables -P OUTPUT DROP

# 保存iptbales规则
service iptables save

# 重新启动
service iptables restart 


</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id="iptables操作" tabindex="-1"> iptables操作</h3>
<div><pre><code><span># 查看所有规则列表并打印编号</span>
iptables <span>-L</span> <span>-n</span> --line-numbers

<span># 删除一条规则</span>
iptables <span>-D</span> INPUT <span>7</span>
<span># 或</span>
iptables <span>-D</span> OUTPUT <span>7</span>

<span># 允许所有出口访问</span>
<span>sudo</span> iptables <span>-A</span> OUTPUT <span>-j</span> ACCEPT

<span>#允许所有入口访问</span>
<span>sudo</span> iptables <span>-A</span> INPUT <span>-j</span> ACCEPT

</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id="更换ssh端口脚本" tabindex="-1"> 更换ssh端口脚本</h3>
<div><pre><code><span>#!/bin/sh</span>

<span># 先备份iptables规则</span>
<span>mkdir</span> /web/shell/iptables_bak
<span>cp</span> /etc/sysconfig/iptables /web/shell/iptables_bak/iptables

<span>sed</span> <span>-i</span> <span>"s|#Port 22|Port 22|g"</span> /etc/ssh/sshd_config

<span># 设置之前关闭防火墙才是最安全的办法，否则会发生连接不上的问题</span>
<span>#service iptables stop</span>

<span># 禁止所有ip访问22端口</span>
iptables <span>-I</span> INPUT <span>-p</span> tcp <span>--dport</span> <span>22</span> <span>-j</span> DROP

<span># 开放指定ip可以连接22端口</span>
iptables <span>-A</span> INPUT <span>-i</span> <span>127.0</span>.0.1 <span>-p</span> tcp <span>--dport</span> <span>22</span> <span>-j</span> ACCEPT
iptables <span>-I</span> INPUT <span>-s</span> x.x.x.x,192.168.2.0/24 <span>-p</span> tcp <span>--dport</span> <span>22</span> <span>-j</span> ACCEPT

<span>service</span> iptables save
<span>service</span> sshd restart
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div>]]></content:encoded>
    </item>
  </channel>
</rss>